<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ideal NPS Implementation</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.31/jspdf.plugin.autotable.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Exo+2:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Variáveis CSS para tema consistente */
        :root {
            --primary: #1A237E;
            --secondary: #E65100;
            --accent: #FF6E40;
            --accent-light: #FFAB91;
            --text: #FFFFFF;
            --text-dim: #B0BEC5;
            --success: #00E676;
            --warning: #FFD600;
            --danger: #FF1744;
            --card-bg: rgba(26, 35, 126, 0.8);
            --card-border: rgba(230, 81, 0, 0.3);
            --sidebar-width: 280px;
            --tooltip-bg: rgba(0, 0, 0, 0.9);
            --tooltip-text: #FFFFFF;
        }

        /* Reset e estilos base */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: 
                radial-gradient(circle at 20% 30%, rgba(230, 81, 0, 0.4) 0%, transparent 50%),
                radial-gradient(circle at 80% 70%, rgba(26, 35, 126, 0.9) 0%, transparent 50%),
                linear-gradient(135deg, #1A237E 0%, #E65100 50%, #000000 100%);
            color: var(--text);
            font-family: 'Exo 2', sans-serif;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }

        /* Grid de fundo cyber */
        .cyber-grid {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                linear-gradient(rgba(230, 81, 0, 0.15) 1px, transparent 1px),
                linear-gradient(90deg, rgba(26, 35, 126, 0.15) 1px, transparent 1px);
            background-size: 50px 50px;
            pointer-events: none;
            z-index: -1;
        }

        /* Layout principal */
        .container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: var(--sidebar-width);
            background: linear-gradient(135deg, rgba(26, 35, 126, 0.95), rgba(230, 81, 0, 0.95));
            backdrop-filter: blur(10px);
            border-right: 1px solid var(--card-border);
            box-shadow: 5px 0 15px rgba(0, 0, 0, 0.7);
            position: fixed;
            height: 100vh;
            z-index: 100;
            overflow-y: auto;
        }

        /* Logo */
        .logo {
            padding: 30px 20px;
            text-align: center;
            border-bottom: 1px solid var(--card-border);
            margin-bottom: 20px;
            position: relative;
        }

        .logo h1 {
            font-family: 'Orbitron', monospace;
            font-size: 1.8rem;
            font-weight: 900;
            background: linear-gradient(90deg, var(--accent), var(--accent-light));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 0 0 10px rgba(230, 81, 0, 0.7);
            letter-spacing: 2px;
        }

        .logo p {
            color: var(--text-dim);
            margin-top: 5px;
            font-size: 0.9rem;
        }

        /* Navegação */
        .nav-links {
            padding: 0 15px;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            margin: 8px 0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
            background: rgba(26, 35, 126, 0.7);
        }

        .nav-item.active {
            background: rgba(230, 81, 0, 0.3);
            border-left: 3px solid var(--accent);
            box-shadow: inset 0 0 15px rgba(230, 81, 0, 0.3);
        }

        .nav-item i {
            font-size: 1.2rem;
            margin-right: 15px;
            width: 24px;
            text-align: center;
            color: var(--accent);
        }

        .nav-item span {
            color: var(--text);
            font-weight: 500;
        }

        /* Conteúdo principal */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 30px;
        }

        /* Cabeçalho */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--card-border);
        }

        .header h2 {
            font-family: 'Orbitron', monospace;
            font-size: 2rem;
            font-weight: 700;
            background: linear-gradient(90deg, var(--accent), var(--accent-light));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        /* Abas */
        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Cards */
        .card {
            background: var(--card-bg);
            border: 1px solid var(--card-border);
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 3px;
            background: linear-gradient(90deg, var(--accent), transparent);
        }

        .card-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.4rem;
            font-weight: 700;
            margin-bottom: 20px;
            color: var(--accent);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* Botões */
        .btn {
            background: linear-gradient(135deg, var(--secondary), var(--primary));
            border: 1px solid var(--card-border);
            color: var(--text);
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-family: 'Exo 2', sans-serif;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
            position: relative;
        }

        .btn:hover {
            box-shadow: 0 0 15px rgba(230, 81, 0, 0.3);
            transform: translateY(-2px);
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--accent), var(--accent-light));
            border: 1px solid var(--accent);
        }

        .btn-export {
            background: linear-gradient(135deg, var(--accent-light), #FFCCBC);
            border: 1px solid var(--accent-light);
        }

        .btn-meta {
            background: linear-gradient(135deg, var(--warning), var(--accent));
            border: 1px solid var(--warning);
            font-size: 0.9rem;
            padding: 8px 16px;
        }

        .btn-historico {
            background: linear-gradient(135deg, var(--success), var(--primary));
            border: 1px solid var(--success);
            margin-left: 10px;
        }

        /* Botão Zerar Tabela */
        .btn-zerar {
            background: linear-gradient(135deg, var(--danger), #FF5252);
            border: 1px solid var(--danger);
            color: var(--text);
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-family: 'Exo 2', sans-serif;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            margin-top: 15px;
        }

        .btn-zerar:hover {
            box-shadow: 0 0 15px rgba(255, 23, 68, 0.3);
            transform: translateY(-2px);
        }

        /* Formulários */
        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--accent);
        }

        .form-control {
            width: 100%;
            background: rgba(26, 35, 126, 0.7);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            padding: 12px 15px;
            color: var(--text);
            font-family: 'Exo 2', sans-serif;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 10px rgba(230, 81, 0, 0.3);
        }

        /* Display de scores */
        .score-display {
            background: linear-gradient(135deg, var(--secondary), var(--primary));
            border: 1px solid var(--card-border);
            border-radius: 12px;
            padding: 25px;
            text-align: center;
            margin: 20px 0;
            position: relative;
            overflow: hidden;
        }

        .score-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .score-title {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .score-value {
            font-family: 'Orbitron', monospace;
            font-size: 3.5rem;
            font-weight: 700;
            margin: 10px 0;
        }

        .score-meta {
            font-size: 0.9rem;
            color: var(--text-dim);
            margin-top: 10px;
        }

        .score-progress {
            width: 100%;
            height: 8px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            margin-top: 15px;
            overflow: hidden;
        }

        .score-progress-bar {
            height: 100%;
            background: linear-gradient(90deg, var(--success), var(--warning));
            border-radius: 4px;
            transition: width 0.5s ease;
        }

        .score-good { color: var(--success); text-shadow: 0 0 10px var(--success); }
        .score-medium { color: var(--warning); text-shadow: 0 0 10px var(--warning); }
        .score-bad { color: var(--danger); text-shadow: 0 0 10px var(--danger); }

        /* Sistema de notas */
        .notes-system {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 15px;
            margin: 25px 0;
        }

        .note-card {
            background: rgba(26, 35, 126, 0.5);
            border: 1px solid var(--card-border);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

        .note-card:hover {
            border-color: var(--accent);
            box-shadow: 0 0 15px rgba(230, 81, 0, 0.2);
        }

        .note-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .note-number {
            font-family: 'Orbitron', monospace;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--accent);
        }

        .note-count {
            background: var(--secondary);
            border-radius: 20px;
            padding: 5px 10px;
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--text);
        }

        .note-input {
            width: 100%;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid var(--card-border);
            border-radius: 6px;
            padding: 8px;
            color: var(--text);
            text-align: center;
            font-family: 'Orbitron', monospace;
        }

        .clients-list {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease;
            margin-top: 10px;
        }

        .note-card.expanded .clients-list {
            max-height: 200px;
            overflow-y: auto;
        }

        .client-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px;
            margin: 5px 0;
            background: rgba(230, 81, 0, 0.1);
            border-radius: 6px;
            font-size: 0.9rem;
        }

        .client-domain {
            flex: 1;
            text-overflow: ellipsis;
            overflow: hidden;
            white-space: nowrap;
            color: var(--text);
        }

        .client-date {
            font-size: 0.8rem;
            color: var(--text-dim);
            margin-left: 10px;
        }

        .add-client-btn {
            width: 100%;
            margin-top: 10px;
            padding: 8px;
            background: rgba(230, 81, 0, 0.1);
            border: 1px dashed var(--card-border);
            border-radius: 6px;
            color: var(--text-dim);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .add-client-btn:hover {
            border-color: var(--accent);
            color: var(--accent);
        }

        /* Gráficos */
        .chart-container {
            height: 350px;
            margin: 30px 0;
        }

        /* Tabelas */
        .table-container {
            overflow-x: auto;
            margin: 25px 0;
            border-radius: 10px;
            border: 1px solid var(--card-border);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: var(--card-bg);
        }

        th {
            background: rgba(230, 81, 0, 0.1);
            padding: 15px;
            text-align: left;
            font-weight: 600;
            color: var(--accent);
            border-bottom: 1px solid var(--card-border);
        }

        td {
            padding: 12px 15px;
            border-bottom: 1px solid rgba(230, 81, 0, 0.1);
            color: var(--text);
        }

        /* Mensagens de status */
        .status-message {
            padding: 12px 15px;
            border-radius: 8px;
            margin: 15px 0;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .status-success {
            background: rgba(0, 230, 118, 0.1);
            border: 1px solid var(--success);
            color: var(--success);
        }

        .status-error {
            background: rgba(255, 23, 68, 0.1);
            border: 1px solid var(--danger);
            color: var(--danger);
        }

        .status-info {
            background: rgba(230, 81, 0, 0.1);
            border: 1px solid var(--accent);
            color: var(--accent);
        }

        /* Lista de analistas */
        .analista-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            background: rgba(230, 81, 0, 0.05);
            border-radius: 8px;
            border-left: 3px solid var(--accent);
        }

        .analista-info {
            flex: 1;
        }

        .analista-nome {
            font-weight: 600;
            color: var(--text);
            margin-bottom: 5px;
        }

        .analista-area {
            font-size: 0.9rem;
            color: var(--text-dim);
        }

        .analista-actions {
            display: flex;
            gap: 10px;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 0.9rem;
        }

        /* Filtros */
        .filters {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-buttons {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .filter-btn {
            background: rgba(26, 35, 126, 0.7);
            border: 1px solid var(--card-border);
            color: var(--text);
            padding: 10px 15px;
            border-radius: 6px;
            cursor: pointer;
            font-family: 'Exo 2', sans-serif;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            text-align: left;
        }

        .filter-btn:hover {
            border-color: var(--accent);
            background: rgba(230, 81, 0, 0.1);
        }

        .filter-btn.active {
            background: rgba(230, 81, 0, 0.2);
            border-color: var(--accent);
            box-shadow: 0 0 10px rgba(230, 81, 0, 0.3);
        }

        /* Exportação */
        .export-section {
            text-align: right;
            margin-top: 20px;
        }

        .export-options {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            flex-wrap: wrap;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: var(--card-bg);
            margin: 10% auto;
            padding: 30px;
            border: 1px solid var(--card-border);
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            position: relative;
            box-shadow: 0 0 30px rgba(230, 81, 0, 0.3);
        }

        .close {
            position: absolute;
            right: 20px;
            top: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: var(--text-dim);
            transition: color 0.3s ease;
        }

        .close:hover {
            color: var(--accent);
        }

        .modal-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 20px;
            color: var(--accent);
        }

        .export-option {
            background: rgba(26, 35, 126, 0.5);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            padding: 20px;
            margin: 15px 0;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .export-option:hover {
            border-color: var(--accent);
            background: rgba(230, 81, 0, 0.1);
            transform: translateY(-2px);
        }

        .export-option h3 {
            color: var(--accent);
            margin-bottom: 10px;
            font-family: 'Orbitron', monospace;
        }

        .export-option p {
            color: var(--text-dim);
            font-size: 0.9rem;
        }

        .quality-selector {
            margin: 20px 0;
        }

        .quality-options {
            display: flex;
            gap: 15px;
            margin-top: 10px;
        }

        .quality-option {
            flex: 1;
            padding: 15px;
            background: rgba(26, 35, 126, 0.5);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .quality-option:hover {
            border-color: var(--accent);
        }

        .quality-option.selected {
            border-color: var(--accent);
            background: rgba(230, 81, 0, 0.2);
        }

        .quality-option h4 {
            color: var(--accent);
            margin-bottom: 5px;
        }

        .quality-option p {
            color: var(--text-dim);
            font-size: 0.8rem;
        }

        /* Resumo de exportação */
        .export-summary {
            background: rgba(230, 81, 0, 0.05);
            border: 1px solid var(--card-border);
            border-radius: 12px;
            padding: 20px;
            margin: 20px 0;
        }

        .export-summary h3 {
            color: var(--accent);
            margin-bottom: 15px;
            font-family: 'Orbitron', monospace;
        }

        .export-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }

        .metric-card {
            background: rgba(26, 35, 126, 0.5);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            padding: 15px;
            text-align: center;
        }

        .metric-value {
            font-family: 'Orbitron', monospace;
            font-size: 1.8rem;
            font-weight: 700;
            margin: 10px 0;
        }

        .metric-label {
            font-size: 0.9rem;
            color: var(--text-dim);
        }

        /* Loading overlay */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .loading-content {
            text-align: center;
            color: var(--accent);
        }

        .spinner {
            border: 4px solid rgba(230, 81, 0, 0.3);
            border-radius: 50%;
            border-top: 4px solid var(--accent);
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Aba de explicação */
        .explicacao-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        @media (max-width: 968px) {
            .explicacao-container {
                grid-template-columns: 1fr;
            }
        }

        .explicacao-card {
            background: rgba(26, 35, 126, 0.6);
            border: 1px solid var(--card-border);
            border-radius: 12px;
            padding: 25px;
            position: relative;
            overflow: hidden;
        }

        .explicacao-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, var(--accent), transparent);
        }

        .explicacao-title {
            font-family: 'Orbitron', monospace;
            font-size: 1.3rem;
            font-weight: 700;
            margin-bottom: 20px;
            color: var(--accent);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .explicacao-title i {
            font-size: 1.2rem;
        }

        .formula-box {
            background: rgba(230, 81, 0, 0.1);
            border: 1px solid var(--accent);
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
            font-size: 1.1rem;
            text-align: center;
            color: var(--accent);
        }

        .exemplo-box {
            background: rgba(26, 35, 126, 0.4);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
        }

        .exemplo-title {
            font-weight: 600;
            color: var(--accent-light);
            margin-bottom: 10px;
        }

        .exemplo-calculo {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 8px 0;
            font-family: 'Courier New', monospace;
        }

        .exemplo-numero {
            background: var(--accent);
            color: var(--primary);
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
            min-width: 30px;
            text-align: center;
        }

        .exemplo-operador {
            color: var(--text-dim);
        }

        .interpretacao-box {
            background: linear-gradient(135deg, rgba(230, 81, 0, 0.1), rgba(26, 35, 126, 0.1));
            border-left: 4px solid var(--accent);
            padding: 15px;
            margin: 20px 0;
            border-radius: 0 8px 8px 0;
        }

        .interpretacao-title {
            font-weight: 600;
            color: var(--accent);
            margin-bottom: 10px;
        }

        .interpretacao-item {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 8px 0;
        }

        .interpretacao-item i {
            color: var(--accent-light);
            width: 20px;
        }

        .fluxo-diagram {
            background: rgba(26, 35, 126, 0.3);
            border: 1px solid var(--card-border);
            border-radius: 12px;
            padding: 25px;
            margin: 30px 0;
            text-align: center;
        }

        .fluxo-steps {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 30px 0;
            flex-wrap: wrap;
            gap: 20px;
        }

        .fluxo-step {
            background: var(--card-bg);
            border: 2px solid var(--accent);
            border-radius: 50%;
            width: 80px;
            height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            position: relative;
            color: var(--accent);
            font-weight: bold;
        }

        .fluxo-step i {
            font-size: 1.5rem;
            margin-bottom: 5px;
        }

        .fluxo-step::after {
            content: '→';
            position: absolute;
            right: -25px;
            color: var(--accent);
            font-size: 1.5rem;
        }

        .fluxo-step:last-child::after {
            display: none;
        }

        .dica-box {
            background: rgba(0, 230, 118, 0.1);
            border: 1px solid var(--success);
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
        }

        .dica-title {
            font-weight: 600;
            color: var(--success);
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 10px;
        }

        .resumo-final {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            border-radius: 12px;
            padding: 25px;
            margin: 30px 0;
            text-align: center;
        }

        .resumo-final h3 {
            font-family: 'Orbitron', monospace;
            font-size: 1.5rem;
            color: var(--accent-light);
            margin-bottom: 15px;
        }

        .resumo-final p {
            color: var(--text);
            line-height: 1.6;
            margin-bottom: 15px;
        }

        /* Tooltips */
        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 250px;
            background-color: var(--tooltip-bg);
            color: var(--tooltip-text);
            text-align: center;
            border-radius: 8px;
            padding: 10px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -125px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 0.9rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        .tooltip .tooltiptext::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: var(--tooltip-bg) transparent transparent transparent;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        .tooltip-icon {
            margin-left: 5px;
            color: var(--accent-light);
            cursor: help;
            font-size: 0.9rem;
        }

        /* Modal de Meta */
        .meta-modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .meta-modal-content {
            background: var(--card-bg);
            margin: 15% auto;
            padding: 30px;
            border: 1px solid var(--card-border);
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            position: relative;
            box-shadow: 0 0 30px rgba(230, 81, 0, 0.3);
        }

        .meta-form {
            margin-top: 20px;
        }

        .meta-input-group {
            margin-bottom: 20px;
        }

        .meta-input {
            width: 100%;
            padding: 12px;
            background: rgba(26, 35, 126, 0.7);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            color: var(--text);
            font-size: 1rem;
        }

        .meta-input:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 10px rgba(230, 81, 0, 0.3);
        }

        .meta-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 25px;
        }

        /* Meta Display */
        .meta-display {
            background: rgba(255, 214, 0, 0.1);
            border: 1px solid var(--warning);
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
            text-align: center;
        }

        .meta-value {
            font-family: 'Orbitron', monospace;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--warning);
            margin: 5px 0;
        }

        .meta-achievement {
            font-size: 0.9rem;
            color: var(--success);
            margin-top: 10px;
        }

        /* Variação de métricas */
        .metric-variation {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-top: 10px;
            font-size: 0.9rem;
        }

        .variation-positive {
            color: var(--success);
        }

        .variation-negative {
            color: var(--danger);
        }

        .variation-neutral {
            color: var(--warning);
        }

        /* Modal de Fechamento de Mês */
        .fechamento-modal {
            display: none;
            position: fixed;
            z-index: 1002;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .fechamento-modal-content {
            background: var(--card-bg);
            margin: 10% auto;
            padding: 30px;
            border: 1px solid var(--card-border);
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            position: relative;
            box-shadow: 0 0 30px rgba(230, 81, 0, 0.3);
        }

        .fechamento-form {
            margin-top: 20px;
        }

        .fechamento-input-group {
            margin-bottom: 20px;
        }

        .fechamento-input {
            width: 100%;
            padding: 12px;
            background: rgba(26, 35, 126, 0.7);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            color: var(--text);
            font-size: 1rem;
        }

        .fechamento-input:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 10px rgba(230, 81, 0, 0.3);
        }

        .fechamento-buttons {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 25px;
        }

        .historico-container {
            margin-top: 20px;
        }

        .historico-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .historico-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--accent);
        }

        .historico-meses {
            display: flex;
            gap: 10px;
            overflow-x: auto;
            padding: 10px 0;
        }

        .historico-mes {
            background: rgba(26, 35, 126, 0.5);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            padding: 10px 15px;
            min-width: 120px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .historico-mes:hover {
            border-color: var(--accent);
            background: rgba(230, 81, 0, 0.1);
        }

        .historico-mes.active {
            background: rgba(230, 81, 0, 0.2);
            border-color: var(--accent);
            box-shadow: 0 0 10px rgba(230, 81, 0, 0.3);
        }

        .historico-mes-nome {
            font-weight: 600;
            color: var(--accent);
            margin-bottom: 5px;
        }

        .historico-mes-csat {
            font-size: 0.9rem;
            color: var(--text);
        }

        .historico-mes-nps {
            font-size: 0.9rem;
            color: var(--text);
        }

        .historico-detalhes {
            margin-top: 20px;
            padding: 15px;
            background: rgba(26, 35, 126, 0.3);
            border-radius: 8px;
            border: 1px solid var(--card-border);
        }

        .historico-grafico {
            height: 200px;
            margin-top: 15px;
        }

        /* Estilos para badges de notas */
        .nota-badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-weight: bold;
            font-size: 0.9rem;
            text-align: center;
            min-width: 30px;
        }

        .nota-excelente {
            background-color: rgba(0, 230, 118, 0.2);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .nota-bom {
            background-color: rgba(0, 230, 118, 0.1);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .nota-regular {
            background-color: rgba(255, 214, 0, 0.2);
            color: var(--warning);
            border: 1px solid var(--warning);
        }

        .nota-ruim {
            background-color: rgba(255, 23, 68, 0.2);
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        .nota-promotor {
            background-color: rgba(0, 230, 118, 0.2);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .nota-neutro {
            background-color: rgba(255, 214, 0, 0.2);
            color: var(--warning);
            border: 1px solid var(--warning);
        }

        .nota-detrator {
            background-color: rgba(255, 23, 68, 0.2);
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        /* Estatísticas de clientes */
        .cliente-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .stat-card {
            background: rgba(26, 35, 126, 0.5);
            border: 1px solid var(--card-border);
            border-radius: 8px;
            padding: 20px;
            text-align: center;
        }

        .stat-value {
            font-family: 'Orbitron', monospace;
            font-size: 2rem;
            font-weight: 700;
            margin: 10px 0;
        }

        .stat-label {
            color: var(--text-dim);
            font-size: 0.9rem;
        }

        /* Responsividade */
        @media (max-width: 768px) {
            .notes-system {
                grid-template-columns: repeat(3, 1fr);
            }
            
            .filters {
                grid-template-columns: 1fr;
            }
            
            .export-section {
                text-align: center;
            }
            
            .export-options {
                justify-content: center;
            }
            
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            
            .main-content {
                margin-left: 0;
            }
            
            .container {
                flex-direction: column;
            }

            .score-header {
                flex-direction: column;
                gap: 10px;
            }

            .export-metrics {
                grid-template-columns: 1fr;
            }
            
            .explicacao-container {
                grid-template-columns: 1fr;
            }
            
            .cliente-stats {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="cyber-grid"></div>
    
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="logo">
                <h1>IDEAL NPS</h1>
                <p>IMPLEMENTATION DASHBOARD</p>
            </div>
            
            <div class="nav-links">
                <div class="nav-item active tooltip" onclick="openTab('cadastro')">
                    <i class="fas fa-user-plus"></i>
                    <span>Cadastrar Analista</span>
                    <span class="tooltiptext">Adicione novos analistas ao sistema para começar a acompanhar seu desempenho</span>
                </div>
                <div class="nav-item tooltip" onclick="openTab('area')">
                    <i class="fas fa-chart-bar"></i>
                    <span>CSAT da Área</span>
                    <span class="tooltiptext">Visualize o desempenho consolidado de toda a área com filtros e métricas detalhadas</span>
                </div>
                <div class="nav-item tooltip" onclick="openTab('individual')">
                    <i class="fas fa-search"></i>
                    <span>Analista Individual</span>
                    <span class="tooltiptext">Acesse análises detalhadas de cada analista com gráficos individuais</span>
                </div>
                <div class="nav-item tooltip" onclick="openTab('historico')">
                    <i class="fas fa-history"></i>
                    <span>Histórico Mensal</span>
                    <span class="tooltiptext">Acompanhe a evolução das métricas ao longo do tempo e compare meses anteriores</span>
                </div>
                <div class="nav-item tooltip" onclick="openTab('avaliacoes-cliente')">
                    <i class="fas fa-star"></i>
                    <span>Avaliações por Cliente</span>
                    <span class="tooltiptext">Visualize todas as avaliações de clientes individuais</span>
                </div>
                <div class="nav-item tooltip" onclick="openTab('explicacao')">
                    <i class="fas fa-question-circle"></i>
                    <span>Como Funciona o Ideal NPS?</span>
                    <span class="tooltiptext">Entenda como as métricas CSAT e NPS são calculadas e interpretadas</span>
                </div>
            </div>
        </div>
        
        <!-- Conteúdo Principal -->
        <div class="main-content">
            <div class="header">
                <h2>Dashboard de Performance</h2>
                <div class="header-actions">
                    <span id="current-date" style="color: var(--text-dim); font-family: 'Orbitron', monospace;"></span>
                </div>
            </div>
            
            <!-- Aba de Cadastro -->
            <div id="cadastro" class="tab-content active">
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-user-plus"></i>
                        Cadastrar Novo Analista
                        <i class="fas fa-info-circle tooltip-icon"></i>
                    </h3>
                    <div class="form-group">
                        <label class="form-label">Nome do Analista:</label>
                        <input type="text" id="nomeAnalista" class="form-control" placeholder="Digite o nome completo">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Área de Atuação:</label>
                        <select id="areaAnalista" class="form-control">
                            <option value="onboarding">Onboarding</option>
                            <option value="renovacao">Renovação</option>
                        </select>
                    </div>
                    <button class="btn btn-primary tooltip" onclick="cadastrarAnalista()">
                        <i class="fas fa-save"></i> Cadastrar Analista
                        <span class="tooltiptext">Adicione o analista ao sistema para começar a registrar avaliações</span>
                    </button>
                </div>
                
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-users"></i>
                        Analistas Cadastrados
                        <i class="fas fa-info-circle tooltip-icon"></i>
                    </h3>
                    <div id="listaAnalistas" class="analista-list">
                        <!-- Lista será preenchida via JavaScript -->
                    </div>
                </div>
            </div>
            
            <!-- Aba da Área -->
            <div id="area" class="tab-content">
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-chart-line"></i>
                        Dashboard Consolidado da Área
                        <i class="fas fa-info-circle tooltip-icon"></i>
                    </h3>
                    
                    <div class="filters">
                        <div class="filter-group">
                            <label class="form-label">Filtrar por Área:</label>
                            <select id="filtroArea" class="form-control" onchange="atualizarDashboardArea()">
                                <option value="todos">Todas as Áreas</option>
                                <option value="onboarding">Onboarding</option>
                                <option value="renovacao">Renovação</option>
                            </select>
                        </div>
                        
                        <div class="filter-group">
                            <label class="form-label">Ordenar por Quantidade de Avaliações:</label>
                            <div class="filter-buttons">
                                <button class="filter-btn tooltip" onclick="ordenarPor('avaliacoes', 'desc')">
                                    <i class="fas fa-arrow-down"></i> Maior quantidade de avaliações
                                    <span class="tooltiptext">Ordena os analistas com maior número de avaliações primeiro</span>
                                </button>
                                <button class="filter-btn tooltip" onclick="ordenarPor('avaliacoes', 'asc')">
                                    <i class="fas fa-arrow-up"></i> Menor quantidade de avaliações
                                    <span class="tooltiptext">Ordena os analistas com menor número de avaliações primeiro</span>
                                </button>
                            </div>
                        </div>
                        
                        <div class="filter-group">
                            <label class="form-label">Ordenar por Percentual CSAT:</label>
                            <div class="filter-buttons">
                                <button class="filter-btn tooltip" onclick="ordenarPor('csat', 'desc')">
                                    <i class="fas fa-arrow-down"></i> Maior percentual de CSAT
                                    <span class="tooltiptext">Ordena os analistas com maior CSAT primeiro</span>
                                </button>
                                <button class="filter-btn tooltip" onclick="ordenarPor('csat', 'asc')">
                                    <i class="fas fa-arrow-up"></i> Menor percentual de CSAT
                                    <span class="tooltiptext">Ordena os analistas com menor CSAT primeiro</span>
                                </button>
                            </div>
                        </div>
                        
                        <div class="filter-group">
                            <label class="form-label">Ordenar por Percentual NPS:</label>
                            <div class="filter-buttons">
                                <button class="filter-btn tooltip" onclick="ordenarPor('nps', 'desc')">
                                    <i class="fas fa-arrow-down"></i> Maior percentual de NPS
                                    <span class="tooltiptext">Ordena os analistas com maior NPS primeiro</span>
                                </button>
                                <button class="filter-btn tooltip" onclick="ordenarPor('nps', 'asc')">
                                    <i class="fas fa-arrow-up"></i> Menor percentual de NPS
                                    <span class="tooltiptext">Ordena os analistas com menor NPS primeiro</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="score-display" id="csatArea">
                        <div class="score-header">
                            <div class="score-title">CSAT da Área</div>
                            <button class="btn btn-meta tooltip" onclick="abrirModalMeta('csat', 'area')">
                                <i class="fas fa-bullseye"></i> Adicionar Meta
                                <span class="tooltiptext">Defina uma meta de CSAT para a área</span>
                            </button>
                            <button class="btn btn-historico tooltip" onclick="abrirModalFechamento()">
                                <i class="fas fa-calendar-check"></i> Fechar Mês
                                <span class="tooltiptext">Salve os dados atuais como histórico mensal</span>
                            </button>
                        </div>
                        <div class="score-value">--%</div>
                        <div class="score-meta" id="csatAreaMeta"></div>
                        <div class="metric-variation" id="csatAreaVariacao"></div>
                        <div class="score-progress">
                            <div class="score-progress-bar" id="csatAreaProgress"></div>
                        </div>
                    </div>
                    
                    <div class="score-display" id="npsArea">
                        <div class="score-header">
                            <div class="score-title">NPS da Área</div>
                            <button class="btn btn-meta tooltip" onclick="abrirModalMeta('nps', 'area')">
                                <i class="fas fa-bullseye"></i> Adicionar Meta
                                <span class="tooltiptext">Defina uma meta de NPS para a área</span>
                            </button>
                        </div>
                        <div class="score-value">--</div>
                        <div class="score-meta" id="npsAreaMeta"></div>
                        <div class="metric-variation" id="npsAreaVariacao"></div>
                        <div class="score-progress">
                            <div class="score-progress-bar" id="npsAreaProgress"></div>
                        </div>
                    </div>
                    
                    <div class="chart-container">
                        <canvas id="chartArea"></canvas>
                    </div>
                    
                    <div class="export-section">
                        <div class="export-options">
                            <button class="btn btn-export tooltip" onclick="abrirModalExportacao()">
                                <i class="fas fa-file-pdf"></i> Exportar PDF Detalhado
                                <span class="tooltiptext">Gere um relatório completo em PDF com todas as métricas</span>
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-table"></i>
                        Desempenho Individual
                        <i class="fas fa-info-circle tooltip-icon"></i>
                    </h3>
                    <div id="tabelaArea" class="table-container">
                        <!-- Tabela será preenchida via JavaScript -->
                    </div>
                </div>
            </div>
            
            <!-- Aba Individual -->
            <div id="individual" class="tab-content">
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-user-search"></i>
                        Selecionar Analista
                        <i class="fas fa-info-circle tooltip-icon"></i>
                    </h3>
                    <div class="form-group">
                        <select id="selecionarAnalista" class="form-control" onchange="carregarDadosAnalista()">
                            <option value="">Selecione um analista</option>
                        </select>
                    </div>
                </div>
                
                <div id="dadosAnalista" style="display: none;">
                    <!-- Resumo de exportação -->
                    <div class="export-summary">
                        <h3>Resumo para Exportação</h3>
                        <div class="export-metrics" id="resumoExportacao">
                            <!-- Será preenchido via JavaScript -->
                        </div>
                        <button class="btn btn-export tooltip" onclick="exportarAnalistaPDF()">
                            <i class="fas fa-file-pdf"></i> Exportar Dados do Analista
                            <span class="tooltiptext">Gere um relatório individual em PDF para este analista</span>
                        </button>
                    </div>
                    
                    <!-- Sub-abas CSAT e NPS -->
                    <div class="card">
                        <div style="display: flex; gap: 10px; margin-bottom: 20px;">
                            <button class="btn btn-primary active tooltip" onclick="openSubTab('csat')">
                                <i class="fas fa-smile"></i> Demonstrativo CSAT
                                <span class="tooltiptext">Visualize as métricas de satisfação do cliente</span>
                            </button>
                            <button class="btn btn-primary tooltip" onclick="openSubTab('nps')">
                                <i class="fas fa-chart-line"></i> Demonstrativo NPS
                                <span class="tooltiptext">Visualize as métricas de lealdade do cliente</span>
                            </button>
                        </div>
                        
                        <!-- Sub-aba CSAT -->
                        <div id="csat" class="sub-tab-content active">
                            <h4>Distribuição de Notas CSAT</h4>
                            <div class="notes-system" id="sistemaCSAT">
                                <!-- Sistema de notas CSAT será gerado via JavaScript -->
                            </div>
                            
                            <!-- Botão Zerar Tabela -->
                            <button class="btn-zerar tooltip" onclick="zerarTabelaCSAT()">
                                <i class="fas fa-trash-alt"></i> Zerar Tabela CSAT
                                <span class="tooltiptext">Apaga todos os dados de CSAT para inserir novos</span>
                            </button>
                            
                            <div class="score-display" id="scoreCSAT">
                                <div class="score-header">
                                    <div class="score-title">CSAT do Analista</div>
                                    <button class="btn btn-meta tooltip" onclick="abrirModalMeta('csat', 'individual')">
                                        <i class="fas fa-bullseye"></i> Adicionar Meta
                                        <span class="tooltiptext">Defina uma meta de CSAT para este analista</span>
                                    </button>
                                </div>
                                <div class="score-value">--%</div>
                                <div class="score-meta" id="csatIndividualMeta"></div>
                                <div class="metric-variation" id="csatIndividualVariacao"></div>
                                <div class="score-progress">
                                    <div class="score-progress-bar" id="csatIndividualProgress"></div>
                                </div>
                            </div>
                            <div class="chart-container">
                                <canvas id="chartCSAT"></canvas>
                            </div>
                        </div>
                        
                        <!-- Sub-aba NPS -->
                        <div id="nps" class="sub-tab-content">
                            <h4>Distribuição de Notas NPS</h4>
                            <div class="notes-system" id="sistemaNPS">
                                <!-- Sistema de notas NPS será gerado via JavaScript -->
                            </div>
                            <div class="score-display" id="scoreNPS">
                                <div class="score-header">
                                    <div class="score-title">NPS do Analista</div>
                                    <button class="btn btn-meta tooltip" onclick="abrirModalMeta('nps', 'individual')">
                                        <i class="fas fa-bullseye"></i> Adicionar Meta
                                        <span class="tooltiptext">Defina uma meta de NPS para este analista</span>
                                    </button>
                                </div>
                                <div class="score-value">--</div>
                                <div class="score-meta" id="npsIndividualMeta"></div>
                                <div class="metric-variation" id="npsIndividualVariacao"></div>
                                <div class="score-progress">
                                    <div class="score-progress-bar" id="npsIndividualProgress"></div>
                                </div>
                            </div>
                            <div class="chart-container">
                                <canvas id="chartNPS"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Aba de Histórico -->
            <div id="historico" class="tab-content">
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-history"></i>
                        Histórico Mensal de Desempenho
                        <i class="fas fa-info-circle tooltip-icon"></i>
                    </h3>
                    
                    <div class="historico-container">
                        <div class="historico-header">
                            <div class="historico-title">Selecione um período para análise:</div>
                            <button class="btn btn-primary tooltip" onclick="abrirModalFechamento()">
                                <i class="fas fa-calendar-plus"></i> Novo Fechamento
                                <span class="tooltiptext">Registre um novo fechamento mensal</span>
                            </button>
                        </div>
                        
                        <div class="historico-meses" id="historicoMeses">
                            <!-- Lista de meses será preenchida via JavaScript -->
                        </div>
                        
                        <div class="historico-detalhes" id="historicoDetalhes" style="display: none;">
                            <h4 style="color: var(--accent); margin-bottom: 15px;">Detalhes do Período</h4>
                            <div class="export-metrics" id="historicoMetrics">
                                <!-- Métricas do período selecionado -->
                            </div>
                            <div class="historico-grafico">
                                <canvas id="historicoChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-chart-line"></i>
                        Evolução Temporal das Métricas
                        <i class="fas fa-info-circle tooltip-icon"></i>
                    </h3>
                    
                    <div class="chart-container">
                        <canvas id="evolucaoChart"></canvas>
                    </div>
                </div>
            </div>
            
            <!-- Aba de Avaliações por Cliente -->
            <div id="avaliacoes-cliente" class="tab-content">
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-star"></i>
                        Avaliações por Cliente
                        <i class="fas fa-info-circle tooltip-icon"></i>
                    </h3>
                    
                    <div class="filters">
                        <div class="filter-group">
                            <label class="form-label">Filtrar por Analista:</label>
                            <select id="filtroAnalistaAvaliacoes" class="form-control" onchange="carregarAvaliacoesPorCliente()">
                                <option value="todos">Todos os Analistas</option>
                            </select>
                        </div>
                        
                        <div class="filter-group">
                            <label class="form-label">Filtrar por Tipo de Avaliação:</label>
                            <select id="filtroTipoAvaliacao" class="form-control" onchange="carregarAvaliacoesPorCliente()">
                                <option value="todos">Todos os Tipos</option>
                                <option value="csat">CSAT</option>
                                <option value="nps">NPS</option>
                            </select>
                        </div>
                        
                        <div class="filter-group">
                            <label class="form-label">Filtrar por Nota:</label>
                            <select id="filtroNota" class="form-control" onchange="carregarAvaliacoesPorCliente()">
                                <option value="todos">Todas as Notas</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Estatísticas -->
                    <div class="cliente-stats" id="clienteStats">
                        <!-- Será preenchido via JavaScript -->
                    </div>
                    
                    <div id="tabelaAvaliacoesCliente" class="table-container">
                        <!-- Tabela será preenchida via JavaScript -->
                    </div>
                    
                    <div class="export-section">
                        <div class="export-options">
                            <button class="btn btn-export tooltip" onclick="exportarAvaliacoesClientesPDF()">
                                <i class="fas fa-file-pdf"></i> Exportar Avaliações de Clientes
                                <span class="tooltiptext">Gere um relatório com todas as avaliações de clientes</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Aba de Explicação -->
            <div id="explicacao" class="tab-content">
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-graduation-cap"></i>
                        Como Funciona o Ideal NPS?
                    </h3>
                    <p style="color: var(--text-dim); font-size: 1.1rem; line-height: 1.6;">
                        Bem-vindo ao guia completo do Ideal NPS! Aqui você entenderá passo a passo como nossos cálculos 
                        de CSAT e NPS funcionam, tanto para análise individual quanto consolidada da área.
                    </p>
                </div>

                <div class="explicacao-container">
                    <!-- Explicação CSAT -->
                    <div class="explicacao-card">
                        <h3 class="explicacao-title">
                            <i class="fas fa-smile"></i>
                            CSAT - Customer Satisfaction Score
                        </h3>
                        
                        <p style="color: var(--text); line-height: 1.6;">
                            O CSAT mede a satisfação do cliente através de uma escala de 1 a 10, 
                            onde 1 é "muito insatisfeito" e 10 é "muito satisfeito".
                        </p>

                        <div class="formula-box">
                            CSAT = (Soma das notas × Quantidade) / Total Respondentes × 10
                        </div>

                        <div class="exemplo-box">
                            <div class="exemplo-title">Exemplo Prático:</div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-numero">10</span>
                                <span class="exemplo-operador">avaliações nota</span>
                                <span class="exemplo-numero">9</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-numero">5</span>
                                <span class="exemplo-operador">avaliações nota</span>
                                <span class="exemplo-numero">7</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-operador">Total = (10×9) + (5×7) = 90 + 35 = 125</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-operador">Média = 125 / 15 = 8.33</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-operador">CSAT = 8.33 × 10 =</span>
                                <span class="exemplo-numero" style="background: var(--success); color: white;">83.3%</span>
                            </div>
                        </div>

                        <div class="interpretacao-box">
                            <div class="interpretacao-title">Interpretação dos Resultados:</div>
                            <div class="interpretacao-item">
                                <i class="fas fa-check-circle"></i>
                                <span><strong>80-100%:</strong> Excelente - Clientes muito satisfeitos</span>
                            </div>
                            <div class="interpretacao-item">
                                <i class="fas fa-minus-circle"></i>
                                <span><strong>60-79%:</strong> Bom - Satisfação adequada</span>
                            </div>
                            <div class="interpretacao-item">
                                <i class="fas fa-times-circle"></i>
                                <span><strong>0-59%:</strong> Precisa melhorar - Insatisfação detectada</span>
                            </div>
                        </div>
                    </div>

                    <!-- Explicação NPS -->
                    <div class="explicacao-card">
                        <h3 class="explicacao-title">
                            <i class="fas fa-chart-line"></i>
                            NPS - Net Promoter Score
                        </h3>
                        
                        <p style="color: var(--text); line-height: 1.6;">
                            O NPS mede a lealdade do cliente classificando-os em três categorias: 
                            Promotores, Neutros e Detratores, através de uma escala de 0 a 10.
                        </p>

                        <div class="formula-box">
                            NPS = (Promotores - Detratores) / Total × 100
                        </div>

                        <div class="exemplo-box">
                            <div class="exemplo-title">Classificação:</div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-numero" style="background: var(--success);">9-10</span>
                                <span class="exemplo-operador">= Promotores (leais)</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-numero" style="background: var(--warning);">7-8</span>
                                <span class="exemplo-operador">= Neutros (não entram no cálculo)</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-numero" style="background: var(--danger);">0-6</span>
                                <span class="exemplo-operador">= Detratores (risco de churn)</span>
                            </div>
                            
                            <div class="exemplo-title" style="margin-top: 15px;">Exemplo Prático:</div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-numero">20</span>
                                <span class="exemplo-operador">promotores</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-numero">5</span>
                                <span class="exemplo-operador">detratores</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-operador">Total = 25 respondentes</span>
                            </div>
                            <div class="exemplo-calculo">
                                <span class="exemplo-operador">NPS = (20 - 5) / 25 × 100 =</span>
                                <span class="exemplo-numero" style="background: var(--success); color: white;">60</span>
                            </div>
                        </div>

                        <div class="interpretacao-box">
                            <div class="interpretacao-title">Interpretação dos Resultados:</div>
                            <div class="interpretacao-item">
                                <i class="fas fa-trophy"></i>
                                <span><strong>50 a 100:</strong> Excelente - Alta lealdade</span>
                            </div>
                            <div class="interpretacao-item">
                                <i class="fas fa-thumbs-up"></i>
                                <span><strong>0 a 49:</strong> Bom - Lealdade adequada</span>
                            </div>
                            <div class="interpretacao-item">
                                <i class="fas fa-exclamation-triangle"></i>
                                <span><strong>-100 a -1:</strong> Crítico - Risco de perda de clientes</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Fluxo do Processo -->
                <div class="card">
                    <h3 class="card-title">
                        <i class="fas fa-cogs"></i>
                        Fluxo do Processo de Cálculo
                    </h3>
                    
                    <div class="fluxo-diagram">
                        <h4 style="color: var(--accent-light); margin-bottom: 20px;">Como os dados são processados:</h4>
                        
                        <div class="fluxo-steps">
                            <div class="fluxo-step">
                                <i class="fas fa-clipboard-list"></i>
                                <span>Coleta</span>
                            </div>
                            <div class="fluxo-step">
                                <i class="fas fa-calculator"></i>
                                <span>Cálculo</span>
                            </div>
                            <div class="fluxo-step">
                                <i class="fas fa-chart-bar"></i>
                                <span>Análise</span>
                            </div>
                            <div class="fluxo-step">
                                <i class="fas fa-bullseye"></i>
                                <span>Ação</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Diferença Individual vs Área -->
                <div class="explicacao-container">
                    <div class="explicacao-card">
                        <h3 class="explicacao-title">
                            <i class="fas fa-user"></i>
                            Análise Individual
                        </h3>
                        
                        <p style="color: var(--text); line-height: 1.6;">
                            Na análise individual, calculamos o CSAT e NPS para cada analista 
                            separadamente, considerando apenas as avaliações que ele recebeu.
                        </p>

                        <div class="dica-box">
                            <div class="dica-title">
                                <i class="fas fa-lightbulb"></i>
                                Dica Importante
                            </div>
                            <p>A análise individual permite identificar pontos fortes e fracos específicos 
                            de cada analista, direcionando treinamentos e reconhecimentos.</p>
                        </div>

                        <div class="exemplo-box">
                            <div class="exemplo-title">Cenário Individual:</div>
                            <p>Analista João recebeu 15 avaliações CSAT e 20 avaliações NPS. 
                            O sistema calcula:</p>
                            <ul style="color: var(--text); margin-left: 20px; margin-top: 10px;">
                                <li>CSAT do João: média de suas 15 avaliações</li>
                                <li>NPS do João: (promotores - detratores) / 20 × 100</li>
                            </ul>
                        </div>
                    </div>

                    <div class="explicacao-card">
                        <h3 class="explicacao-title">
                            <i class="fas fa-users"></i>
                            Análise da Área
                        </h3>
                        
                        <p style="color: var(--text); line-height: 1.6;">
                            Na análise consolidada da área, agrupamos todos os analistas 
                            (ou filtramos por área específica) para obter uma visão geral do desempenho.
                        </p>

                        <div class="dica-box">
                            <div class="dica-title">
                                <i class="fas fa-lightbulb"></i>
                                Dica Importante
                            </div>
                            <p>A análise da área mostra o desempenho geral da equipe, 
                            permitindo comparações e identificação de padrões.</p>
                        </div>

                        <div class="exemplo-box">
                            <div class="exemplo-title">Cenário da Área:</div>
                            <p>Área de Onboarding com 5 analistas. O sistema calcula:</p>
                            <ul style="color: var(--text); margin-left: 20px; margin-top: 10px;">
                                <li>CSAT da Área: média de todas as avaliações CSAT dos 5 analistas</li>
                                <li>NPS da Área: (todos promotores - todos detratores) / total × 100</li>
                            </ul>
                        </div>
                    </div>
                </div>

                <!-- Resumo Final -->
                <div class="resumo-final">
                    <h3><i class="fas fa-star"></i> Resumo Final</h3>
                    <p>
                        O Ideal NPS implementa metodologias padrão de mercado para cálculo de CSAT e NPS, 
                        garantindo precisão e confiabilidade nos resultados. Tanto na análise individual 
                        quanto na consolidada, os cálculos seguem as mesmas fórmulas matemáticas, 
                        variando apenas no escopo dos dados considerados.
                    </p>
                    <p>
                        <strong>Para análise individual:</strong> Foco no desempenho específico de cada analista<br>
                        <strong>Para análise da área:</strong> Visão consolidada do desempenho da equipe
                    </p>
                    <button class="btn btn-primary tooltip" onclick="testarCalculos()">
                        <i class="fas fa-play"></i> Testar Cálculos com Exemplos
                        <span class="tooltiptext">Veja exemplos práticos de como os cálculos são realizados</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Exportação -->
    <div id="exportModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="fecharModalExportacao()">&times;</span>
            <h2 class="modal-title">Opções de Exportação</h2>
            
            <div class="quality-selector">
                <h3>Selecione a Qualidade:</h3>
                <div class="quality-options">
                    <div class="quality-option" onclick="selecionarQualidade('padrao')">
                        <h4>Padrão</h4>
                        <p>Qualidade boa, arquivo menor</p>
                    </div>
                    <div class="quality-option selected" onclick="selecionarQualidade('alta')">
                        <h4>Alta Qualidade</h4>
                        <p>Imagens nítidas, detalhes precisos</p>
                    </div>
                    <div class="quality-option" onclick="selecionarQualidade('maxima')">
                        <h4>Máxima Qualidade</h4>
                        <p>Resolução máxima, impressão profissional</p>
                    </div>
                </div>
            </div>
            
            <div class="export-option" onclick="exportarPDFCompleto()">
                <h3><i class="fas fa-file-pdf"></i> Relatório Completo da Área</h3>
                <p>Inclui todos os dados consolidados, gráficos detalhados, análise individual e métricas avançadas</p>
            </div>
            
            <div class="export-option" onclick="exportarPDFResumido()">
                <h3><i class="fas fa-file-pdf"></i> Relatório Resumido</h3>
                <p>Visão geral rápida com métricas principais e gráficos consolidados</p>
            </div>
            
            <div class="export-option" onclick="exportarPDFAnalistas()">
                <h3><i class="fas fa-file-pdf"></i> Análise Detalhada por Analista</h3>
                <p>Relatório individual para cada analista com todos os seus dados e gráficos</p>
            </div>
        </div>
    </div>

    <!-- Modal de Meta -->
    <div id="metaModal" class="meta-modal">
        <div class="meta-modal-content">
            <span class="close" onclick="fecharModalMeta()">&times;</span>
            <h2 class="modal-title" id="metaModalTitle">Definir Meta</h2>
            
            <div class="meta-form">
                <div class="meta-input-group">
                    <label class="form-label" id="metaModalLabel">Valor da Meta:</label>
                    <input type="number" id="metaInput" class="meta-input" placeholder="Digite o valor da meta" min="0" max="100" step="0.1">
                </div>
                
                <div class="meta-input-group">
                    <label class="form-label">Período da Meta:</label>
                    <select id="metaPeriodo" class="meta-input">
                        <option value="mensal">Mensal</option>
                        <option value="trimestral">Trimestral</option>
                        <option value="semestral">Semestral</option>
                        <option value="anual">Anual</option>
                    </select>
                </div>
                
                <div class="meta-input-group">
                    <label class="form-label">Descrição (opcional):</label>
                    <input type="text" id="metaDescricao" class="meta-input" placeholder="Adicione uma descrição para a meta">
                </div>
                
                <div class="meta-buttons">
                    <button class="btn" onclick="fecharModalMeta()">Cancelar</button>
                    <button class="btn btn-primary" onclick="salvarMeta()">Salvar Meta</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de Fechamento de Mês -->
    <div id="fechamentoModal" class="fechamento-modal">
        <div class="fechamento-modal-content">
            <span class="close" onclick="fecharModalFechamento()">&times;</span>
            <h2 class="modal-title">Fechamento Mensal</h2>
            <p style="color: var(--text-dim); margin-bottom: 20px;">
                Ao finalizar o mês, os dados atuais serão salvos no histórico e o sistema será reiniciado para o próximo período.
            </p>
            
            <div class="fechamento-form">
                <div class="fechamento-input-group">
                    <label class="form-label">Mês/Ano de Referência:</label>
                    <input type="month" id="fechamentoMes" class="fechamento-input" required>
                </div>
                
                <div class="fechamento-input-group">
                    <label class="form-label">Observações (opcional):</label>
                    <textarea id="fechamentoObservacoes" class="fechamento-input" rows="3" placeholder="Adicione observações sobre este período"></textarea>
                </div>
                
                <div class="fechamento-buttons">
                    <button class="btn" onclick="fecharModalFechamento()">Cancelar</button>
                    <button class="btn btn-primary" onclick="salvarFechamentoMensal()">Salvar Fechamento</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="loading-overlay">
        <div class="loading-content">
            <div class="spinner"></div>
            <p>Gerando PDF...</p>
        </div>
    </div>

    <script>
        // Estrutura de dados melhorada
        let analistas = JSON.parse(localStorage.getItem('analistas')) || [];
        let metas = JSON.parse(localStorage.getItem('metas')) || {
            area: { csat: null, nps: null },
            individuais: {}
        };
        let historicoMensal = JSON.parse(localStorage.getItem('historicoMensal')) || [];
        let charts = {};
        let ordenacaoAtual = { campo: null, direcao: null };
        let qualidadeExportacao = 'alta';
        let metaAtual = { tipo: null, escopo: null };

        // Inicialização
        document.addEventListener('DOMContentLoaded', function() {
            atualizarListaAnalistas();
            atualizarSelecaoAnalistas();
            atualizarDashboardArea();
            gerarSistemaNotas();
            updateCurrentDate();
            carregarMetas();
            carregarHistorico();
            
            // Definir mês atual como padrão no modal de fechamento
            const now = new Date();
            const currentMonth = now.toISOString().slice(0, 7);
            document.getElementById('fechamentoMes').value = currentMonth;
        });

        // Funções de Navegação
        function openTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
            document.getElementById(tabName).classList.add('active');
            event.currentTarget.classList.add('active');
            
            if (tabName === 'area') atualizarDashboardArea();
            if (tabName === 'individual') atualizarSelecaoAnalistas();
            if (tabName === 'historico') atualizarHistorico();
            if (tabName === 'avaliacoes-cliente') {
                atualizarFiltroAnalistasAvaliacoes();
                carregarAvaliacoesPorCliente();
            }
        }

        function openSubTab(subTabName) {
            document.querySelectorAll('.sub-tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('#dadosAnalista .btn-primary').forEach(btn => btn.classList.remove('active'));
            document.getElementById(subTabName).classList.add('active');
            event.currentTarget.classList.add('active');
        }

        // Sistema de Notas com Detalhes
        function gerarSistemaNotas() {
            const sistemaCSAT = document.getElementById('sistemaCSAT');
            const sistemaNPS = document.getElementById('sistemaNPS');
            
            // CSAT: Notas 1-10
            sistemaCSAT.innerHTML = '';
            for (let i = 1; i <= 10; i++) {
                sistemaCSAT.innerHTML += criarCardNota(i, 'csat');
            }
            
            // NPS: Notas 0-10
            sistemaNPS.innerHTML = '';
            for (let i = 0; i <= 10; i++) {
                sistemaNPS.innerHTML += criarCardNota(i, 'nps');
            }
        }

        function criarCardNota(nota, tipo) {
            return `
                <div class="note-card" onclick="toggleClientes(${nota}, '${tipo}')">
                    <div class="note-header">
                        <div class="note-number">${nota}</div>
                        <div class="note-count" id="count-${tipo}-${nota}">0</div>
                    </div>
                    <input type="number" class="note-input" min="0" value="0" 
                           onchange="atualizarQuantidadeNota(${nota}, '${tipo}', this.value)"
                           onclick="event.stopPropagation()">
                    <div class="clients-list" id="clientes-${tipo}-${nota}">
                        <!-- Lista de clientes será preenchida dinamicamente -->
                    </div>
                    <button class="add-client-btn" onclick="adicionarCliente(${nota}, '${tipo}', event)">
                        + Adicionar Cliente
                    </button>
                </div>
            `;
        }

        function toggleClientes(nota, tipo) {
            const card = document.querySelector(`#clientes-${tipo}-${nota}`).parentElement;
            card.classList.toggle('expanded');
        }

        function atualizarQuantidadeNota(nota, tipo, quantidade) {
            const analistaId = document.getElementById('selecionarAnalista').value;
            if (!analistaId) return;
            
            const analista = analistas.find(a => a.id == analistaId);
            const qtd = parseInt(quantidade) || 0;
            
            if (tipo === 'csat' && nota >= 1 && nota <= 10) {
                analista.csat[nota-1] = qtd;
            } else if (tipo === 'nps' && nota >= 0 && nota <= 10) {
                analista.nps[nota] = qtd;
            }
            
            salvarDados();
            atualizarContador(nota, tipo, qtd);
            if (tipo === 'csat') calcularCSATIndividual();
            if (tipo === 'nps') calcularNPSIndividual();
            atualizarResumoExportacao();
            atualizarDashboardArea(); // Atualiza a área também
        }

        function adicionarCliente(nota, tipo, event) {
            event.stopPropagation();
            const dominio = prompt(`Digite o domínio do cliente para nota ${nota}:`);
            if (!dominio) return;
            
            const analistaId = document.getElementById('selecionarAnalista').value;
            if (!analistaId) return;
            
            const analista = analistas.find(a => a.id == analistaId);
            const cliente = {
                dominio: dominio,
                data: new Date().toLocaleDateString('pt-BR'),
                nota: nota,
                tipo: tipo
            };
            
            if (!analista.clientes) analista.clientes = [];
            analista.clientes.push(cliente);
            
            // Atualizar quantidade
            if (tipo === 'csat' && nota >= 1 && nota <= 10) {
                analista.csat[nota-1] = (analista.csat[nota-1] || 0) + 1;
            } else if (tipo === 'nps' && nota >= 0 && nota <= 10) {
                analista.nps[nota] = (analista.nps[nota] || 0) + 1;
            }
            
            salvarDados();
            carregarDadosAnalista();
            mostrarStatus('Cliente adicionado com sucesso!', 'success');
        }

        function atualizarContador(nota, tipo, quantidade) {
            const elemento = document.getElementById(`count-${tipo}-${nota}`);
            if (elemento) elemento.textContent = quantidade;
        }

        // Função para zerar a tabela CSAT
        function zerarTabelaCSAT() {
            const analistaId = document.getElementById('selecionarAnalista').value;
            if (!analistaId) {
                mostrarStatus('Selecione um analista primeiro', 'error');
                return;
            }
            
            if (!confirm('Tem certeza que deseja zerar todos os dados de CSAT deste analista? Esta ação não pode ser desfeita.')) {
                return;
            }
            
            const analista = analistas.find(a => a.id == analistaId);
            if (!analista) return;
            
            // Zerar todas as notas CSAT
            analista.csat = Array(10).fill(0);
            
            // Remover clientes CSAT
            if (analista.clientes) {
                analista.clientes = analista.clientes.filter(cliente => cliente.tipo !== 'csat');
            }
            
            // Salvar dados
            salvarDados();
            
            // Recarregar interface
            carregarDadosAnalista();
            
            // Mostrar mensagem de sucesso
            mostrarStatus('Dados CSAT zerados com sucesso!', 'success');
        }

        // Funções de Cadastro
        function cadastrarAnalista() {
            const nome = document.getElementById('nomeAnalista').value.trim();
            const area = document.getElementById('areaAnalista').value;
            
            if (!nome) {
                mostrarStatus('Por favor, digite o nome do analista', 'error');
                return;
            }
            
            const novoAnalista = {
                id: Date.now(),
                nome: nome,
                area: area,
                csat: Array(10).fill(0),
                nps: Array(11).fill(0),
                clientes: []
            };
            
            analistas.push(novoAnalista);
            salvarDados();
            
            // Limpar formulário
            document.getElementById('nomeAnalista').value = '';
            
            // Atualizar interfaces
            atualizarListaAnalistas();
            atualizarSelecaoAnalistas();
            atualizarDashboardArea();
            
            mostrarStatus('Analista cadastrado com sucesso!', 'success');
        }

        function atualizarListaAnalistas() {
            const lista = document.getElementById('listaAnalistas');
            
            if (analistas.length === 0) {
                lista.innerHTML = '<p style="text-align: center; color: var(--text-dim);">Nenhum analista cadastrado</p>';
                return;
            }
            
            lista.innerHTML = '';
            analistas.forEach(analista => {
                const item = document.createElement('div');
                item.className = 'analista-item';
                item.innerHTML = `
                    <div class="analista-info">
                        <div class="analista-nome">${analista.nome}</div>
                        <div class="analista-area">Área: ${analista.area === 'onboarding' ? 'Onboarding' : 'Renovação'}</div>
                    </div>
                    <div class="analista-actions">
                        <button class="btn btn-small tooltip" onclick="editarAnalista(${analista.id})">
                            <i class="fas fa-edit"></i>
                            <span class="tooltiptext">Editar informações do analista</span>
                        </button>
                        <button class="btn btn-small tooltip" onclick="excluirAnalista(${analista.id})">
                            <i class="fas fa-trash"></i>
                            <span class="tooltiptext">Excluir analista do sistema</span>
                        </button>
                    </div>
                `;
                lista.appendChild(item);
            });
        }

        function excluirAnalista(id) {
            if (confirm('Tem certeza que deseja excluir este analista?')) {
                analistas = analistas.filter(a => a.id !== id);
                // Remover metas individuais do analista excluído
                if (metas.individuais[id]) {
                    delete metas.individuais[id];
                    salvarMetas();
                }
                salvarDados();
                atualizarListaAnalistas();
                atualizarSelecaoAnalistas();
                atualizarDashboardArea();
                mostrarStatus('Analista excluído com sucesso!', 'success');
            }
        }

        function editarAnalista(id) {
            const analista = analistas.find(a => a.id === id);
            if (!analista) return;
            
            const novoNome = prompt('Digite o novo nome do analista:', analista.nome);
            if (!novoNome) return;
            
            analista.nome = novoNome;
            salvarDados();
            atualizarListaAnalistas();
            atualizarSelecaoAnalistas();
            mostrarStatus('Analista atualizado com sucesso!', 'success');
        }

        function atualizarSelecaoAnalistas() {
            const select = document.getElementById('selecionarAnalista');
            select.innerHTML = '<option value="">Selecione um analista</option>';
            
            analistas.forEach(analista => {
                const option = document.createElement('option');
                option.value = analista.id;
                option.textContent = analista.nome;
                select.appendChild(option);
            });
        }

        // Funções de Ordenação
        function ordenarPor(campo, direcao) {
            // Atualizar estado da ordenação
            ordenacaoAtual = { campo, direcao };
            
            // Atualizar visual dos botões
            document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
            event.currentTarget.classList.add('active');
            
            // Atualizar dashboard
            atualizarDashboardArea();
        }

        function aplicarOrdenacao(analistasFiltrados) {
            if (!ordenacaoAtual.campo) return analistasFiltrados;
            
            return analistasFiltrados.sort((a, b) => {
                let valorA, valorB;
                
                switch (ordenacaoAtual.campo) {
                    case 'avaliacoes':
                        valorA = calcularTotalAvaliacoes(a);
                        valorB = calcularTotalAvaliacoes(b);
                        break;
                    case 'csat':
                        valorA = calcularCSAT(a);
                        valorB = calcularCSAT(b);
                        break;
                    case 'nps':
                        valorA = calcularNPS(a);
                        valorB = calcularNPS(b);
                        break;
                }
                
                if (ordenacaoAtual.direcao === 'desc') {
                    return valorB - valorA;
                } else {
                    return valorA - valorB;
                }
            });
        }

        // Funções do Dashboard da Área
        function atualizarDashboardArea() {
            const filtroArea = document.getElementById('filtroArea').value;
            
            // Filtrar por área
            let analistasFiltrados = filtroArea === 'todos' 
                ? analistas 
                : analistas.filter(a => a.area === filtroArea);
            
            // Aplicar ordenação se houver
            if (ordenacaoAtual.campo) {
                analistasFiltrados = aplicarOrdenacao(analistasFiltrados);
            }
            
            // Calcular CSAT da área
            let totalCSAT = 0;
            let totalRespondentesCSAT = 0;
            let totalNPS = 0;
            let promotores = 0;
            let detratores = 0;
            
            analistasFiltrados.forEach(analista => {
                for (let i = 0; i < 10; i++) {
                    const qtd = analista.csat[i] || 0;
                    totalCSAT += (i + 1) * qtd;
                    totalRespondentesCSAT += qtd;
                }
                
                for (let i = 0; i <= 10; i++) {
                    const qtd = analista.nps[i] || 0;
                    if (i >= 9) promotores += qtd;
                    if (i <= 6) detratores += qtd;
                    totalNPS += qtd;
                }
            });
            
            const csatArea = totalRespondentesCSAT > 0 
                ? (totalCSAT / totalRespondentesCSAT * 10).toFixed(1) 
                : "0.0";
            
            const npsArea = totalNPS > 0 
                ? ((promotores - detratores) / totalNPS * 100).toFixed(1) 
                : "0.0";
            
            // Atualizar displays
            const csatDisplay = document.querySelector('#csatArea .score-value');
            csatDisplay.textContent = csatArea + '%';
            csatDisplay.className = 'score-value ' + getClassByScore(parseFloat(csatArea), 'csat');
            
            const npsDisplay = document.querySelector('#npsArea .score-value');
            npsDisplay.textContent = npsArea;
            npsDisplay.className = 'score-value ' + getClassByScore(parseFloat(npsArea), 'nps');
            
            // Calcular e exibir variação em relação ao mês anterior
            atualizarVariacaoArea('csat', parseFloat(csatArea));
            atualizarVariacaoArea('nps', parseFloat(npsArea));
            
            // Atualizar metas e progresso
            atualizarMetaDisplay('csat', 'area', parseFloat(csatArea));
            atualizarMetaDisplay('nps', 'area', parseFloat(npsArea));
            
            // Atualizar gráfico
            atualizarGraficoArea(analistasFiltrados);
            
            // Atualizar tabela
            atualizarTabelaArea(analistasFiltrados);
        }

        function getClassByScore(score, type) {
            if (type === 'csat') {
                if (score >= 80) return 'score-good';
                if (score >= 60) return 'score-medium';
                return 'score-bad';
            } else {
                if (score >= 50) return 'score-good';
                if (score >= 0) return 'score-medium';
                return 'score-bad';
            }
        }

        function atualizarVariacaoArea(tipo, valorAtual) {
            const elemento = document.getElementById(`${tipo}AreaVariacao`);
            
            // Obter último mês do histórico
            if (historicoMensal.length > 0) {
                const ultimoMes = historicoMensal[historicoMensal.length - 1];
                const valorAnterior = ultimoMes.area[tipo];
                
                if (valorAnterior !== null && valorAnterior !== undefined) {
                    const variacao = ((valorAtual - valorAnterior) / valorAnterior * 100).toFixed(1);
                    const variacaoAbsoluta = (valorAtual - valorAnterior).toFixed(1);
                    
                    let classeVariacao = 'variation-neutral';
                    let iconeVariacao = 'fas fa-minus';
                    let textoVariacao = '';
                    
                    if (variacao > 0) {
                        classeVariacao = 'variation-positive';
                        iconeVariacao = 'fas fa-arrow-up';
                        textoVariacao = `${variacao}% (${tipo === 'csat' ? '+' : ''}${variacaoAbsoluta})`;
                    } else if (variacao < 0) {
                        classeVariacao = 'variation-negative';
                        iconeVariacao = 'fas fa-arrow-down';
                        textoVariacao = `${variacao}% (${tipo === 'csat' ? '' : ''}${variacaoAbsoluta})`;
                    } else {
                        textoVariacao = '0% (0)';
                    }
                    
                    elemento.innerHTML = `
                        <div class="${classeVariacao}">
                            <i class="${iconeVariacao}"></i>
                            <span>${textoVariacao} vs. mês anterior</span>
                        </div>
                    `;
                    return;
                }
            }
            
            elemento.innerHTML = '';
        }

        function atualizarGraficoArea(analistasFiltrados) {
            const ctx = document.getElementById('chartArea').getContext('2d');
            
            // Destruir gráfico anterior se existir
            if (charts.area) {
                charts.area.destroy();
            }
            
            // Preparar dados
            const labels = analistasFiltrados.map(a => a.nome);
            const csatData = analistasFiltrados.map(calcularCSAT);
            const npsData = analistasFiltrados.map(calcularNPS);
            
            // Adicionar linhas de meta se existirem
            const csatMetaLine = metas.area.csat ? [{
                type: 'line',
                label: `Meta CSAT (${metas.area.csat.valor}%)`,
                data: Array(labels.length).fill(metas.area.csat.valor),
                borderColor: 'rgb(255, 214, 0)',
                backgroundColor: 'rgba(255, 214, 0, 0.1)',
                borderWidth: 2,
                borderDash: [5, 5],
                fill: false,
                pointRadius: 0
            }] : [];
            
            const npsMetaLine = metas.area.nps ? [{
                type: 'line',
                label: `Meta NPS (${metas.area.nps.valor})`,
                data: Array(labels.length).fill(metas.area.nps.valor),
                borderColor: 'rgb(0, 230, 118)',
                backgroundColor: 'rgba(0, 230, 118, 0.1)',
                borderWidth: 2,
                borderDash: [5, 5],
                fill: false,
                pointRadius: 0
            }] : [];
            
            charts.area = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'CSAT (%)',
                            data: csatData,
                            backgroundColor: 'rgba(230, 81, 0, 0.6)',
                            borderColor: 'rgba(230, 81, 0, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'NPS',
                            data: npsData,
                            backgroundColor: 'rgba(0, 230, 118, 0.6)',
                            borderColor: 'rgba(0, 230, 118, 1)',
                            borderWidth: 1
                        },
                        ...csatMetaLine,
                        ...npsMetaLine
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)',
                                callback: function(value) {
                                    return value.toFixed(1);
                                }
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y.toFixed(1);
                                        if (context.dataset.label.includes('CSAT')) {
                                            label += '%';
                                        }
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }

        function atualizarTabelaArea(analistasFiltrados) {
            const tabela = document.getElementById('tabelaArea');
            
            if (analistasFiltrados.length === 0) {
                tabela.innerHTML = '<p style="text-align: center; padding: 20px; color: var(--text-dim);">Nenhum analista encontrado para os filtros selecionados</p>';
                return;
            }
            
            let html = `
                <table>
                    <thead>
                        <tr>
                            <th>Analista</th>
                            <th>Área</th>
                            <th>CSAT</th>
                            <th>Variação CSAT</th>
                            <th>Meta CSAT</th>
                            <th>NPS</th>
                            <th>Variação NPS</th>
                            <th>Meta NPS</th>
                            <th>Total Avaliações</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            analistasFiltrados.forEach(analista => {
                const csat = calcularCSAT(analista);
                const nps = calcularNPS(analista);
                const totalAvaliacoes = calcularTotalAvaliacoes(analista);
                const metaCSAT = metas.individuais[analista.id] ? metas.individuais[analista.id].csat : null;
                const metaNPS = metas.individuais[analista.id] ? metas.individuais[analista.id].nps : null;
                
                // Calcular variações
                const variacaoCSAT = calcularVariacaoIndividual(analista.id, 'csat', parseFloat(csat));
                const variacaoNPS = calcularVariacaoIndividual(analista.id, 'nps', parseFloat(nps));
                
                html += `
                    <tr>
                        <td>${analista.nome}</td>
                        <td>${analista.area === 'onboarding' ? 'Onboarding' : 'Renovação'}</td>
                        <td><span class="score-value ${getClassByScore(parseFloat(csat), 'csat')}">${csat}%</span></td>
                        <td>${variacaoCSAT}</td>
                        <td>${metaCSAT ? `<span style="color: var(--warning)">${metaCSAT.valor}%</span>` : '-'}</td>
                        <td><span class="score-value ${getClassByScore(parseFloat(nps), 'nps')}">${nps}</span></td>
                        <td>${variacaoNPS}</td>
                        <td>${metaNPS ? `<span style="color: var(--warning)">${metaNPS.valor}</span>` : '-'}</td>
                        <td>${totalAvaliacoes}</td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
            `;
            
            tabela.innerHTML = html;
        }

        function calcularVariacaoIndividual(analistaId, tipo, valorAtual) {
            // Obter último mês do histórico
            if (historicoMensal.length > 0) {
                const ultimoMes = historicoMensal[historicoMensal.length - 1];
                const analistaHistorico = ultimoMes.analistas.find(a => a.id == analistaId);
                
                if (analistaHistorico && analistaHistorico[tipo] !== null && analistaHistorico[tipo] !== undefined) {
                    const valorAnterior = analistaHistorico[tipo];
                    const variacao = ((valorAtual - valorAnterior) / valorAnterior * 100).toFixed(1);
                    
                    if (variacao > 0) {
                        return `<span class="variation-positive"><i class="fas fa-arrow-up"></i> ${variacao}%</span>`;
                    } else if (variacao < 0) {
                        return `<span class="variation-negative"><i class="fas fa-arrow-down"></i> ${variacao}%</span>`;
                    } else {
                        return `<span class="variation-neutral"><i class="fas fa-minus"></i> 0%</span>`;
                    }
                }
            }
            
            return '-';
        }

        // Função de cálculo CSAT corrigida
        function calcularCSAT(analista) {
            let total = 0;
            let respondentes = 0;
            
            for (let i = 0; i < 10; i++) {
                const qtd = analista.csat[i] || 0;
                total += (i + 1) * qtd;  // Soma das notas (1-10)
                respondentes += qtd;     // Total de respondentes
            }
            
            // Cálculo correto: média das notas convertida para porcentagem
            return respondentes > 0 ? (total / respondentes * 10).toFixed(1) : "0.0";
        }

        // Função de cálculo NPS (já está correta)
        function calcularNPS(analista) {
            let promotores = 0;
            let detratores = 0;
            let total = 0;
            
            for (let i = 0; i <= 10; i++) {
                const qtd = analista.nps[i] || 0;
                if (i >= 9) promotores += qtd;   // Notas 9-10
                if (i <= 6) detratores += qtd;   // Notas 0-6
                total += qtd;
            }
            
            return total > 0 ? ((promotores - detratores) / total * 100).toFixed(1) : "0.0";
        }

        function calcularTotalAvaliacoes(analista) {
            let total = 0;
            
            for (let i = 0; i < 10; i++) {
                total += analista.csat[i] || 0;
            }
            
            for (let i = 0; i <= 10; i++) {
                total += analista.nps[i] || 0;
            }
            
            return total;
        }

        // Funções do Analista Individual
        function carregarDadosAnalista() {
            const analistaId = document.getElementById('selecionarAnalista').value;
            
            if (!analistaId) {
                document.getElementById('dadosAnalista').style.display = 'none';
                return;
            }
            
            document.getElementById('dadosAnalista').style.display = 'block';
            
            const analista = analistas.find(a => a.id == analistaId);
            if (!analista) return;
            
            // Atualizar contadores do sistema de notas
            for (let i = 1; i <= 10; i++) {
                atualizarContador(i, 'csat', analista.csat[i-1] || 0);
            }
            
            for (let i = 0; i <= 10; i++) {
                atualizarContador(i, 'nps', analista.nps[i] || 0);
            }
            
            // Carregar lista de clientes
            carregarClientes(analista);
            
            // Calcular e exibir scores
            calcularCSATIndividual();
            calcularNPSIndividual();
            
            // Atualizar resumo de exportação
            atualizarResumoExportacao();
            
            // Atualizar gráficos
            atualizarGraficosIndividuais(analista);
        }

        function atualizarResumoExportacao() {
            const analistaId = document.getElementById('selecionarAnalista').value;
            if (!analistaId) return;
            
            const analista = analistas.find(a => a.id == analistaId);
            if (!analista) return;
            
            const csat = calcularCSAT(analista);
            const nps = calcularNPS(analista);
            const totalAvaliacoes = calcularTotalAvaliacoes(analista);
            
            const resumo = document.getElementById('resumoExportacao');
            resumo.innerHTML = `
                <div class="metric-card">
                    <div class="metric-value ${getClassByScore(parseFloat(csat), 'csat')}">${csat}%</div>
                    <div class="metric-label">CSAT</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value ${getClassByScore(parseFloat(nps), 'nps')}">${nps}</div>
                    <div class="metric-label">NPS</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${totalAvaliacoes}</div>
                    <div class="metric-label">Total Avaliações</div>
                </div>
            `;
        }

        function carregarClientes(analista) {
            if (!analista.clientes) return;
            
            // Agrupar clientes por nota e tipo
            const clientesPorNota = {
                csat: {},
                nps: {}
            };
            
            analista.clientes.forEach(cliente => {
                const nota = cliente.nota;
                const tipo = cliente.tipo;
                
                if (!clientesPorNota[tipo][nota]) {
                    clientesPorNota[tipo][nota] = [];
                }
                
                clientesPorNota[tipo][nota].push(cliente);
            });
            
            // Preencher listas de clientes
            for (let i = 1; i <= 10; i++) {
                preencherListaClientes(i, 'csat', clientesPorNota.csat[i] || []);
            }
            
            for (let i = 0; i <= 10; i++) {
                preencherListaClientes(i, 'nps', clientesPorNota.nps[i] || []);
            }
        }

        function preencherListaClientes(nota, tipo, clientes) {
            const lista = document.getElementById(`clientes-${tipo}-${nota}`);
            
            if (clientes.length === 0) {
                lista.innerHTML = '<p style="text-align: center; color: var(--text-dim); font-size: 0.8rem;">Nenhum cliente</p>';
                return;
            }
            
            let html = '';
            clientes.forEach(cliente => {
                html += `
                    <div class="client-item">
                        <div class="client-domain">${cliente.dominio}</div>
                        <div class="client-date">${cliente.data}</div>
                    </div>
                `;
            });
            
            lista.innerHTML = html;
        }

        function calcularCSATIndividual() {
            const analistaId = document.getElementById('selecionarAnalista').value;
            if (!analistaId) return;
            
            const analista = analistas.find(a => a.id == analistaId);
            const csat = calcularCSAT(analista);
            
            const display = document.querySelector('#scoreCSAT .score-value');
            display.textContent = csat + '%';
            display.className = 'score-value ' + getClassByScore(parseFloat(csat), 'csat');
            
            // Calcular e exibir variação em relação ao mês anterior
            atualizarVariacaoIndividual('csat', parseFloat(csat), analistaId);
            
            // Atualizar meta e progresso
            atualizarMetaDisplay('csat', 'individual', parseFloat(csat), analistaId);
        }

        function calcularNPSIndividual() {
            const analistaId = document.getElementById('selecionarAnalista').value;
            if (!analistaId) return;
            
            const analista = analistas.find(a => a.id == analistaId);
            const nps = calcularNPS(analista);
            
            const display = document.querySelector('#scoreNPS .score-value');
            display.textContent = nps;
            display.className = 'score-value ' + getClassByScore(parseFloat(nps), 'nps');
            
            // Calcular e exibir variação em relação ao mês anterior
            atualizarVariacaoIndividual('nps', parseFloat(nps), analistaId);
            
            // Atualizar meta e progresso
            atualizarMetaDisplay('nps', 'individual', parseFloat(nps), analistaId);
        }

        function atualizarVariacaoIndividual(tipo, valorAtual, analistaId) {
            const elemento = document.getElementById(`${tipo}IndividualVariacao`);
            
            // Obter último mês do histórico
            if (historicoMensal.length > 0) {
                const ultimoMes = historicoMensal[historicoMensal.length - 1];
                const analistaHistorico = ultimoMes.analistas.find(a => a.id == analistaId);
                
                if (analistaHistorico && analistaHistorico[tipo] !== null && analistaHistorico[tipo] !== undefined) {
                    const valorAnterior = analistaHistorico[tipo];
                    const variacao = ((valorAtual - valorAnterior) / valorAnterior * 100).toFixed(1);
                    const variacaoAbsoluta = (valorAtual - valorAnterior).toFixed(1);
                    
                    let classeVariacao = 'variation-neutral';
                    let iconeVariacao = 'fas fa-minus';
                    let textoVariacao = '';
                    
                    if (variacao > 0) {
                        classeVariacao = 'variation-positive';
                        iconeVariacao = 'fas fa-arrow-up';
                        textoVariacao = `${variacao}% (${tipo === 'csat' ? '+' : ''}${variacaoAbsoluta})`;
                    } else if (variacao < 0) {
                        classeVariacao = 'variation-negative';
                        iconeVariacao = 'fas fa-arrow-down';
                        textoVariacao = `${variacao}% (${tipo === 'csat' ? '' : ''}${variacaoAbsoluta})`;
                    } else {
                        textoVariacao = '0% (0)';
                    }
                    
                    elemento.innerHTML = `
                        <div class="${classeVariacao}">
                            <i class="${iconeVariacao}"></i>
                            <span>${textoVariacao} vs. mês anterior</span>
                        </div>
                    `;
                    return;
                }
            }
            
            elemento.innerHTML = '';
        }

        function atualizarGraficosIndividuais(analista) {
            // Gráfico CSAT
            const ctxCSAT = document.getElementById('chartCSAT').getContext('2d');
            
            if (charts.csat) {
                charts.csat.destroy();
            }
            
            // Preparar dados para o gráfico CSAT
            const csatData = analista.csat;
            const csatLabels = Array.from({length: 10}, (_, i) => i + 1);
            
            // Adicionar linha de meta se existir
            const metaCSAT = metas.individuais[analista.id] && metas.individuais[analista.id].csat;
            const csatMetaLine = metaCSAT ? [{
                type: 'line',
                label: `Meta (${metaCSAT.valor}%)`,
                data: Array(10).fill(metaCSAT.valor / 10),
                borderColor: 'rgb(255, 214, 0)',
                backgroundColor: 'rgba(255, 214, 0, 0.1)',
                borderWidth: 2,
                borderDash: [5, 5],
                fill: false,
                pointRadius: 0
            }] : [];
            
            charts.csat = new Chart(ctxCSAT, {
                type: 'bar',
                data: {
                    labels: csatLabels,
                    datasets: [{
                        label: 'Quantidade de Respostas',
                        data: csatData,
                        backgroundColor: 'rgba(230, 81, 0, 0.6)',
                        borderColor: 'rgba(230, 81, 0, 1)',
                        borderWidth: 1
                    },
                    ...csatMetaLine
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    }
                }
            });
            
            // Gráfico NPS
            const ctxNPS = document.getElementById('chartNPS').getContext('2d');
            
            if (charts.nps) {
                charts.nps.destroy();
            }
            
            // Preparar dados para o gráfico NPS
            const npsData = analista.nps;
            const npsLabels = Array.from({length: 11}, (_, i) => i);
            
            // Adicionar linha de meta se existir
            const metaNPS = metas.individuais[analista.id] && metas.individuais[analista.id].nps;
            const npsMetaLine = metaNPS ? [{
                type: 'line',
                label: `Meta (${metaNPS.valor})`,
                data: Array(11).fill(metaNPS.valor),
                borderColor: 'rgb(0, 230, 118)',
                backgroundColor: 'rgba(0, 230, 118, 0.1)',
                borderWidth: 2,
                borderDash: [5, 5],
                fill: false,
                pointRadius: 0
            }] : [];
            
            charts.nps = new Chart(ctxNPS, {
                type: 'bar',
                data: {
                    labels: npsLabels,
                    datasets: [{
                        label: 'Quantidade de Respostas',
                        data: npsData,
                        backgroundColor: npsData.map((_, i) => {
                            if (i <= 6) return 'rgba(255, 23, 68, 0.6)'; // Detratores
                            if (i <= 8) return 'rgba(255, 214, 0, 0.6)';  // Neutros
                            return 'rgba(0, 230, 118, 0.6)';             // Promotores
                        }),
                        borderColor: npsData.map((_, i) => {
                            if (i <= 6) return 'rgba(255, 23, 68, 1)'; // Detratores
                            if (i <= 8) return 'rgba(255, 214, 0, 1)';  // Neutros
                            return 'rgba(0, 230, 118, 1)';             // Promotores
                        }),
                        borderWidth: 1
                    },
                    ...npsMetaLine
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    }
                }
            });
        }

        // Funções de Metas
        function abrirModalMeta(tipo, escopo) {
            metaAtual = { tipo, escopo };
            
            const modal = document.getElementById('metaModal');
            const titulo = document.getElementById('metaModalTitle');
            const label = document.getElementById('metaModalLabel');
            const input = document.getElementById('metaInput');
            
            // Configurar modal baseado no tipo e escopo
            if (tipo === 'csat') {
                titulo.textContent = 'Definir Meta de CSAT';
                label.textContent = 'Valor da Meta (%):';
                input.placeholder = 'Ex: 85';
                input.max = 100;
                input.min = 0;
                input.step = 0.1;
            } else {
                titulo.textContent = 'Definir Meta de NPS';
                label.textContent = 'Valor da Meta:';
                input.placeholder = 'Ex: 50';
                input.max = 100;
                input.min = -100;
                input.step = 0.1;
            }
            
            // Preencher com valor atual se existir
            if (escopo === 'area') {
                const metaAtual = metas.area[tipo];
                if (metaAtual) {
                    input.value = metaAtual.valor;
                    document.getElementById('metaPeriodo').value = metaAtual.periodo;
                    document.getElementById('metaDescricao').value = metaAtual.descricao || '';
                }
            } else {
                const analistaId = document.getElementById('selecionarAnalista').value;
                if (analistaId && metas.individuais[analistaId] && metas.individuais[analistaId][tipo]) {
                    const metaAtual = metas.individuais[analistaId][tipo];
                    input.value = metaAtual.valor;
                    document.getElementById('metaPeriodo').value = metaAtual.periodo;
                    document.getElementById('metaDescricao').value = metaAtual.descricao || '';
                }
            }
            
            modal.style.display = 'block';
        }

        function fecharModalMeta() {
            document.getElementById('metaModal').style.display = 'none';
            // Limpar formulário
            document.getElementById('metaInput').value = '';
            document.getElementById('metaPeriodo').value = 'mensal';
            document.getElementById('metaDescricao').value = '';
        }

        function salvarMeta() {
            const valor = parseFloat(document.getElementById('metaInput').value);
            const periodo = document.getElementById('metaPeriodo').value;
            const descricao = document.getElementById('metaDescricao').value;
            
            if (isNaN(valor)) {
                mostrarStatus('Por favor, digite um valor válido para a meta', 'error');
                return;
            }
            
            const meta = {
                valor: valor,
                periodo: periodo,
                descricao: descricao,
                dataCriacao: new Date().toISOString()
            };
            
            if (metaAtual.escopo === 'area') {
                if (!metas.area) metas.area = {};
                metas.area[metaAtual.tipo] = meta;
            } else {
                const analistaId = document.getElementById('selecionarAnalista').value;
                if (!analistaId) {
                    mostrarStatus('Selecione um analista primeiro', 'error');
                    return;
                }
                
                if (!metas.individuais[analistaId]) {
                    metas.individuais[analistaId] = {};
                }
                metas.individuais[analistaId][metaAtual.tipo] = meta;
            }
            
            salvarMetas();
            fecharModalMeta();
            
            // Atualizar displays
            if (metaAtual.escopo === 'area') {
                atualizarDashboardArea();
            } else {
                if (metaAtual.tipo === 'csat') {
                    calcularCSATIndividual();
                } else {
                    calcularNPSIndividual();
                }
            }
            
            mostrarStatus('Meta salva com sucesso!', 'success');
        }

        function atualizarMetaDisplay(tipo, escopo, valorAtual, analistaId = null) {
            let metaElement, progressElement;
            
            if (escopo === 'area') {
                metaElement = document.getElementById(`${tipo}AreaMeta`);
                progressElement = document.getElementById(`${tipo}AreaProgress`);
                const meta = metas.area && metas.area[tipo];
                
                if (meta) {
                    metaElement.innerHTML = `
                        <div class="meta-display">
                            <div class="meta-value">${meta.valor}${tipo === 'csat' ? '%' : ''}</div>
                            <div>Meta ${meta.periodo}</div>
                            ${meta.descricao ? `<div style="font-size: 0.8rem; margin-top: 5px;">${meta.descricao}</div>` : ''}
                        </div>
                    `;
                    
                    const progresso = Math.min((valorAtual / meta.valor) * 100, 100);
                    progressElement.style.width = progresso + '%';
                    
                    // Adicionar mensagem de conquista
                    if (valorAtual >= meta.valor) {
                        const achievementElement = document.createElement('div');
                        achievementElement.className = 'meta-achievement';
                        achievementElement.innerHTML = '<i class="fas fa-trophy"></i> Meta Atingida!';
                        metaElement.appendChild(achievementElement);
                    }
                } else {
                    metaElement.innerHTML = '';
                    progressElement.style.width = '0%';
                }
            } else {
                metaElement = document.getElementById(`${tipo}IndividualMeta`);
                progressElement = document.getElementById(`${tipo}IndividualProgress`);
                const meta = analistaId && metas.individuais[analistaId] && metas.individuais[analistaId][tipo];
                
                if (meta) {
                    metaElement.innerHTML = `
                        <div class="meta-display">
                            <div class="meta-value">${meta.valor}${tipo === 'csat' ? '%' : ''}</div>
                            <div>Meta ${meta.periodo}</div>
                            ${meta.descricao ? `<div style="font-size: 0.8rem; margin-top: 5px;">${meta.descricao}</div>` : ''}
                        </div>
                    `;
                    
                    const progresso = Math.min((valorAtual / meta.valor) * 100, 100);
                    progressElement.style.width = progresso + '%';
                    
                    // Adicionar mensagem de conquista
                    if (valorAtual >= meta.valor) {
                        const achievementElement = document.createElement('div');
                        achievementElement.className = 'meta-achievement';
                        achievementElement.innerHTML = '<i class="fas fa-trophy"></i> Meta Atingida!';
                        metaElement.appendChild(achievementElement);
                    }
                } else {
                    metaElement.innerHTML = '';
                    progressElement.style.width = '0%';
                }
            }
        }

        function carregarMetas() {
            // Metas são carregadas do localStorage na inicialização
            // Esta função pode ser expandida para outras inicializações
        }

        function salvarMetas() {
            localStorage.setItem('metas', JSON.stringify(metas));
        }

        // Funções de Histórico Mensal
        function abrirModalFechamento() {
            document.getElementById('fechamentoModal').style.display = 'block';
        }

        function fecharModalFechamento() {
            document.getElementById('fechamentoModal').style.display = 'none';
        }

        function salvarFechamentoMensal() {
            const mesReferencia = document.getElementById('fechamentoMes').value;
            const observacoes = document.getElementById('fechamentoObservacoes').value;
            
            if (!mesReferencia) {
                mostrarStatus('Por favor, selecione um mês/ano de referência', 'error');
                return;
            }
            
            // Verificar se já existe um fechamento para este mês
            const existeFechamento = historicoMensal.find(h => h.mes === mesReferencia);
            if (existeFechamento) {
                if (!confirm('Já existe um fechamento para este período. Deseja substituí-lo?')) {
                    return;
                }
                // Remover o fechamento existente
                historicoMensal = historicoMensal.filter(h => h.mes !== mesReferencia);
            }
            
            // Calcular métricas atuais da área
            const filtroArea = document.getElementById('filtroArea').value;
            let analistasFiltrados = filtroArea === 'todos' 
                ? analistas 
                : analistas.filter(a => a.area === filtroArea);
            
            if (ordenacaoAtual.campo) {
                analistasFiltrados = aplicarOrdenacao(analistasFiltrados);
            }
            
            let totalCSAT = 0;
            let totalRespondentesCSAT = 0;
            let totalNPS = 0;
            let promotores = 0;
            let detratores = 0;
            
            analistasFiltrados.forEach(analista => {
                for (let i = 0; i < 10; i++) {
                    const qtd = analista.csat[i] || 0;
                    totalCSAT += (i + 1) * qtd;
                    totalRespondentesCSAT += qtd;
                }
                
                for (let i = 0; i <= 10; i++) {
                    const qtd = analista.nps[i] || 0;
                    if (i >= 9) promotores += qtd;
                    if (i <= 6) detratores += qtd;
                    totalNPS += qtd;
                }
            });
            
            const csatArea = totalRespondentesCSAT > 0 
                ? (totalCSAT / totalRespondentesCSAT * 10).toFixed(1) 
                : "0.0";
            
            const npsArea = totalNPS > 0 
                ? ((promotores - detratores) / totalNPS * 100).toFixed(1) 
                : "0.0";
            
            // Preparar dados dos analistas para o histórico
            const analistasHistorico = analistasFiltrados.map(analista => ({
                id: analista.id,
                nome: analista.nome,
                area: analista.area,
                csat: parseFloat(calcularCSAT(analista)),
                nps: parseFloat(calcularNPS(analista)),
                totalAvaliacoes: calcularTotalAvaliacoes(analista)
            }));
            
            // Criar objeto de fechamento
            const fechamento = {
                mes: mesReferencia,
                dataFechamento: new Date().toISOString(),
                area: {
                    csat: parseFloat(csatArea),
                    nps: parseFloat(npsArea),
                    totalAnalistas: analistasFiltrados.length,
                    totalAvaliacoes: analistasFiltrados.reduce((sum, a) => sum + calcularTotalAvaliacoes(a), 0)
                },
                analistas: analistasHistorico,
                observacoes: observacoes,
                filtroArea: filtroArea
            };
            
            // Adicionar ao histórico
            historicoMensal.push(fechamento);
            
            // Ordenar histórico por data (mais recente primeiro)
            historicoMensal.sort((a, b) => new Date(b.mes) - new Date(a.mes));
            
            // Salvar no localStorage
            salvarHistorico();
            
            // Fechar modal
            fecharModalFechamento();
            
            // Limpar observações
            document.getElementById('fechamentoObservacoes').value = '';
            
            // Atualizar interface
            atualizarHistorico();
            atualizarDashboardArea();
            
            mostrarStatus('Fechamento mensal salvo com sucesso!', 'success');
        }

        function carregarHistorico() {
            // Histórico é carregado do localStorage na inicialização
            // Esta função pode ser expandida para outras inicializações
        }

        function salvarHistorico() {
            localStorage.setItem('historicoMensal', JSON.stringify(historicoMensal));
        }

        function atualizarHistorico() {
            const container = document.getElementById('historicoMeses');
            container.innerHTML = '';
            
            if (historicoMensal.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: var(--text-dim); padding: 20px;">Nenhum fechamento mensal registrado</p>';
                document.getElementById('historicoDetalhes').style.display = 'none';
                return;
            }
            
            // Adicionar cards para cada mês
            historicoMensal.forEach((mes, index) => {
                const data = new Date(mes.mes + '-01');
                const nomeMes = data.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });
                
                const card = document.createElement('div');
                card.className = 'historico-mes';
                if (index === 0) card.classList.add('active'); // Selecionar o mais recente por padrão
                
                card.innerHTML = `
                    <div class="historico-mes-nome">${nomeMes}</div>
                    <div class="historico-mes-csat">CSAT: ${mes.area.csat}%</div>
                    <div class="historico-mes-nps">NPS: ${mes.area.nps}</div>
                `;
                
                card.onclick = () => selecionarMesHistorico(index);
                container.appendChild(card);
            });
            
            // Selecionar o mais recente por padrão
            if (historicoMensal.length > 0) {
                selecionarMesHistorico(0);
            }
        }

        function selecionarMesHistorico(index) {
            // Atualizar visual dos cards
            document.querySelectorAll('.historico-mes').forEach((card, i) => {
                if (i === index) {
                    card.classList.add('active');
                } else {
                    card.classList.remove('active');
                }
            });
            
            // Obter dados do mês selecionado
            const mes = historicoMensal[index];
            
            // Exibir detalhes
            const detalhes = document.getElementById('historicoDetalhes');
            detalhes.style.display = 'block';
            
            // Preencher métricas
            const metrics = document.getElementById('historicoMetrics');
            metrics.innerHTML = `
                <div class="metric-card">
                    <div class="metric-value ${getClassByScore(mes.area.csat, 'csat')}">${mes.area.csat}%</div>
                    <div class="metric-label">CSAT da Área</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value ${getClassByScore(mes.area.nps, 'nps')}">${mes.area.nps}</div>
                    <div class="metric-label">NPS da Área</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${mes.area.totalAnalistas}</div>
                    <div class="metric-label">Total de Analistas</div>
                </div>
                <div class="metric-card">
                    <div class="metric-value">${mes.area.totalAvaliacoes}</div>
                    <div class="metric-label">Total de Avaliações</div>
                </div>
            `;
            
            // Adicionar observações se existirem
            if (mes.observacoes) {
                const obsElement = document.createElement('div');
                obsElement.style.marginTop = '15px';
                obsElement.style.padding = '10px';
                obsElement.style.backgroundColor = 'rgba(26, 35, 126, 0.3)';
                obsElement.style.borderRadius = '8px';
                obsElement.style.fontSize = '0.9rem';
                obsElement.innerHTML = `<strong>Observações:</strong> ${mes.observacoes}`;
                metrics.appendChild(obsElement);
            }
            
            // Atualizar gráfico do histórico
            atualizarGraficoHistorico(mes);
            
            // Atualizar gráfico de evolução
            atualizarGraficoEvolucao();
        }

        function atualizarGraficoHistorico(mes) {
            const ctx = document.getElementById('historicoChart').getContext('2d');
            
            // Destruir gráfico anterior se existir
            if (charts.historico) {
                charts.historico.destroy();
            }
            
            // Preparar dados para o gráfico
            const labels = mes.analistas.map(a => a.nome);
            const csatData = mes.analistas.map(a => a.csat);
            const npsData = mes.analistas.map(a => a.nps);
            
            charts.historico = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'CSAT (%)',
                            data: csatData,
                            backgroundColor: 'rgba(230, 81, 0, 0.6)',
                            borderColor: 'rgba(230, 81, 0, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'NPS',
                            data: npsData,
                            backgroundColor: 'rgba(0, 230, 118, 0.6)',
                            borderColor: 'rgba(0, 230, 118, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)',
                                callback: function(value) {
                                    return value.toFixed(1);
                                }
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y.toFixed(1);
                                        if (context.dataset.label.includes('CSAT')) {
                                            label += '%';
                                        }
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }

        function atualizarGraficoEvolucao() {
            const ctx = document.getElementById('evolucaoChart').getContext('2d');
            
            // Destruir gráfico anterior se existir
            if (charts.evolucao) {
                charts.evolucao.destroy();
            }
            
            // Preparar dados para o gráfico de evolução
            const labels = historicoMensal.slice().reverse().map(mes => {
                const data = new Date(mes.mes + '-01');
                return data.toLocaleDateString('pt-BR', { month: 'short', year: 'numeric' });
            });
            
            const csatData = historicoMensal.slice().reverse().map(mes => mes.area.csat);
            const npsData = historicoMensal.slice().reverse().map(mes => mes.area.nps);
            
            charts.evolucao = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'CSAT (%)',
                            data: csatData,
                            backgroundColor: 'rgba(230, 81, 0, 0.2)',
                            borderColor: 'rgba(230, 81, 0, 1)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: true
                        },
                        {
                            label: 'NPS',
                            data: npsData,
                            backgroundColor: 'rgba(0, 230, 118, 0.2)',
                            borderColor: 'rgba(0, 230, 118, 1)',
                            borderWidth: 2,
                            tension: 0.3,
                            fill: true
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)',
                                callback: function(value) {
                                    return value.toFixed(1);
                                }
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(255, 255, 255, 0.1)'
                            },
                            ticks: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: 'rgba(255, 255, 255, 0.7)'
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y.toFixed(1);
                                        if (context.dataset.label.includes('CSAT')) {
                                            label += '%';
                                        }
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        }

        // Função para testar cálculos com exemplos
        function testarCalculos() {
            // Criar analista de teste
            const analistaTeste = {
                csat: [0, 0, 0, 0, 0, 0, 0, 0, 10, 5], // 10 avaliações nota 9, 5 avaliações nota 10
                nps: [0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 20] // 5 detratores (nota 6), 20 promotores (nota 10)
            };
            
            // Calcular resultados
            const csat = calcularCSAT(analistaTeste);
            const nps = calcularNPS(analistaTeste);
            
            // Mostrar resultados em um modal ou alert
            const mensagem = `
            === TESTE DE CÁLCULOS ===
            
            CSAT:
            • 10 avaliações nota 9
            • 5 avaliações nota 10
            • Soma = (10×9) + (5×10) = 90 + 50 = 140
            • Média = 140 / 15 = 9.33
            • CSAT = 9.33 × 10 = ${csat}%
            
            NPS:
            • 20 promotores (notas 9-10)
            • 5 detratores (notas 0-6)
            • Total = 25 respondentes
            • NPS = (20 - 5) / 25 × 100 = ${nps}
            
            ✅ Cálculos validados com sucesso!
            `;
            
            alert(mensagem);
        }

        // Funções da nova aba "Avaliações por Cliente"
        function atualizarFiltroAnalistasAvaliacoes() {
            const select = document.getElementById('filtroAnalistaAvaliacoes');
            select.innerHTML = '<option value="todos">Todos os Analistas</option>';
            
            analistas.forEach(analista => {
                const option = document.createElement('option');
                option.value = analista.id;
                option.textContent = analista.nome;
                select.appendChild(option);
            });
            
            // Preencher filtro de notas
            const filtroNota = document.getElementById('filtroNota');
            filtroNota.innerHTML = '<option value="todos">Todas as Notas</option>';
            
            // Adicionar opções de notas CSAT (1-10)
            for (let i = 1; i <= 10; i++) {
                const option = document.createElement('option');
                option.value = `csat_${i}`;
                option.textContent = `CSAT: ${i}`;
                filtroNota.appendChild(option);
            }
            
            // Adicionar opções de notas NPS (0-10)
            for (let i = 0; i <= 10; i++) {
                const option = document.createElement('option');
                option.value = `nps_${i}`;
                option.textContent = `NPS: ${i}`;
                filtroNota.appendChild(option);
            }
        }

        function carregarAvaliacoesPorCliente() {
            const filtroAnalista = document.getElementById('filtroAnalistaAvaliacoes').value;
            const filtroTipo = document.getElementById('filtroTipoAvaliacao').value;
            const filtroNota = document.getElementById('filtroNota').value;
            
            // Coletar todos os clientes
            let todosClientes = [];
            
            analistas.forEach(analista => {
                if (filtroAnalista !== 'todos' && analista.id != filtroAnalista) return;
                
                if (analista.clientes && analista.clientes.length > 0) {
                    analista.clientes.forEach(cliente => {
                        // Aplicar filtros
                        if (filtroTipo !== 'todos' && cliente.tipo !== filtroTipo) return;
                        if (filtroNota !== 'todos' && `${cliente.tipo}_${cliente.nota}` !== filtroNota) return;
                        
                        todosClientes.push({
                            ...cliente,
                            analistaNome: analista.nome,
                            analistaArea: analista.area === 'onboarding' ? 'Onboarding' : 'Renovação'
                        });
                    });
                }
            });
            
            // Ordenar por data (mais recente primeiro)
            todosClientes.sort((a, b) => {
                const dataA = new Date(a.data.split('/').reverse().join('-'));
                const dataB = new Date(b.data.split('/').reverse().join('-'));
                return dataB - dataA;
            });
            
            // Preencher estatísticas
            const statsContainer = document.getElementById('clienteStats');
            if (todosClientes.length > 0) {
                const totalClientes = new Set(todosClientes.map(c => c.dominio)).size;
                const csatCount = todosClientes.filter(c => c.tipo === 'csat').length;
                const npsCount = todosClientes.filter(c => c.tipo === 'nps').length;
                
                statsContainer.innerHTML = `
                    <div class="stat-card">
                        <div class="stat-value">${totalClientes}</div>
                        <div class="stat-label">Clientes Únicos</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${todosClientes.length}</div>
                        <div class="stat-label">Total Avaliações</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${csatCount}</div>
                        <div class="stat-label">Avaliações CSAT</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">${npsCount}</div>
                        <div class="stat-label">Avaliações NPS</div>
                    </div>
                `;
            } else {
                statsContainer.innerHTML = '<p style="text-align: center; color: var(--text-dim);">Nenhuma avaliação encontrada</p>';
            }
            
            // Preencher tabela
            const tabela = document.getElementById('tabelaAvaliacoesCliente');
            
            if (todosClientes.length === 0) {
                tabela.innerHTML = '<p style="text-align: center; padding: 20px; color: var(--text-dim);">Nenhuma avaliação de cliente encontrada para os filtros selecionados</p>';
                return;
            }
            
            let html = `
                <table>
                    <thead>
                        <tr>
                            <th>Cliente</th>
                            <th>Analista</th>
                            <th>Área</th>
                            <th>Tipo</th>
                            <th>Nota</th>
                            <th>Data</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            todosClientes.forEach(cliente => {
                const tipoFormatado = cliente.tipo.toUpperCase();
                const corNota = getCorNota(cliente.tipo, cliente.nota);
                
                html += `
                    <tr>
                        <td>${cliente.dominio}</td>
                        <td>${cliente.analistaNome}</td>
                        <td>${cliente.analistaArea}</td>
                        <td>${tipoFormatado}</td>
                        <td><span class="nota-badge ${corNota}">${cliente.nota}</span></td>
                        <td>${cliente.data}</td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
            `;
            
            tabela.innerHTML = html;
        }

        function getCorNota(tipo, nota) {
            if (tipo === 'csat') {
                if (nota >= 9) return 'nota-excelente';
                if (nota >= 7) return 'nota-bom';
                if (nota >= 5) return 'nota-regular';
                return 'nota-ruim';
            } else { // NPS
                if (nota >= 9) return 'nota-promotor';
                if (nota >= 7) return 'nota-neutro';
                return 'nota-detrator';
            }
        }

        // Função para exportar as avaliações de clientes em PDF
        async function exportarAvaliacoesClientesPDF() {
            mostrarStatus('⏳ Gerando relatório de avaliações...', 'info');
            showLoading();
            
            try {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('p', 'mm', 'a4');
                const pageWidth = pdf.internal.pageSize.getWidth();
                const pageHeight = pdf.internal.pageSize.getHeight();
                const margin = 20;
                const contentWidth = pageWidth - (margin * 2);
                
                // Adicionar cabeçalho em todas as páginas
                const addHeader = (pageNumber) => {
                    // Background do cabeçalho
                    pdf.setFillColor(26, 35, 126);
                    pdf.rect(0, 0, pageWidth, 25, 'F');
                    
                    // Linha decorativa
                    pdf.setDrawColor(230, 81, 0);
                    pdf.setLineWidth(0.5);
                    pdf.line(0, 25, pageWidth, 25);
                    
                    // Título
                    pdf.setFontSize(12);
                    pdf.setTextColor(230, 81, 0);
                    pdf.text('RELATÓRIO DE AVALIAÇÕES POR CLIENTE', margin, 17);
                    
                    // Número da página
                    pdf.setFontSize(8);
                    pdf.setTextColor(255, 255, 255);
                    pdf.text(`Página ${pageNumber}`, pageWidth - margin, 17, { align: 'right' });
                };
                
                // Adicionar rodapé em todas as páginas
                const addFooter = () => {
                    pdf.setFillColor(26, 35, 126);
                    pdf.rect(0, pageHeight - 15, pageWidth, 15, 'F');
                    
                    pdf.setDrawColor(230, 81, 0);
                    pdf.setLineWidth(0.5);
                    pdf.line(0, pageHeight - 15, pageWidth, pageHeight - 15);
                    
                    pdf.setFontSize(8);
                    pdf.setTextColor(176, 190, 197);
                    pdf.text('Ideal NPS Implementation - Dashboard de Performance', margin, pageHeight - 7);
                };
                
                // Página 1: Cabeçalho
                addHeader(1);
                addFooter();
                
                // Título
                pdf.setFontSize(20);
                pdf.setTextColor(230, 81, 0);
                pdf.text('Avaliações por Cliente', pageWidth / 2, 50, { align: 'center' });
                
                // Data de geração
                const agora = new Date();
                pdf.setFontSize(12);
                pdf.setTextColor(176, 190, 197);
                pdf.text(`Gerado em: ${agora.toLocaleDateString('pt-BR')} às ${agora.toLocaleTimeString('pt-BR')}`, 
                        pageWidth / 2, 65, { align: 'center' });
                
                // Coletar dados aplicando filtros atuais
                const filtroAnalista = document.getElementById('filtroAnalistaAvaliacoes').value;
                const filtroTipo = document.getElementById('filtroTipoAvaliacao').value;
                const filtroNota = document.getElementById('filtroNota').value;
                
                let todosClientes = [];
                
                analistas.forEach(analista => {
                    if (filtroAnalista !== 'todos' && analista.id != filtroAnalista) return;
                    
                    if (analista.clientes && analista.clientes.length > 0) {
                        analista.clientes.forEach(cliente => {
                            // Aplicar filtros
                            if (filtroTipo !== 'todos' && cliente.tipo !== filtroTipo) return;
                            if (filtroNota !== 'todos' && `${cliente.tipo}_${cliente.nota}` !== filtroNota) return;
                            
                            todosClientes.push({
                                ...cliente,
                                analistaNome: analista.nome,
                                analistaArea: analista.area === 'onboarding' ? 'Onboarding' : 'Renovação'
                            });
                        });
                    }
                });
                
                // Ordenar por data (mais recente primeiro)
                todosClientes.sort((a, b) => {
                    const dataA = new Date(a.data.split('/').reverse().join('-'));
                    const dataB = new Date(b.data.split('/').reverse().join('-'));
                    return dataB - dataA;
                });
                
                // Resumo
                pdf.setFontSize(14);
                pdf.setTextColor(230, 81, 0);
                pdf.text('Resumo:', margin, 85);
                
                pdf.setFontSize(12);
                pdf.setTextColor(255, 255, 255);
                pdf.text(`Total de avaliações: ${todosClientes.length}`, margin, 100);
                
                // Agrupar por tipo
                const csatCount = todosClientes.filter(c => c.tipo === 'csat').length;
                const npsCount = todosClientes.filter(c => c.tipo === 'nps').length;
                
                pdf.text(`Avaliações CSAT: ${csatCount}`, margin, 115);
                pdf.text(`Avaliações NPS: ${npsCount}`, margin, 130);
                
                // Agrupar por analista
                const analistasCount = {};
                todosClientes.forEach(cliente => {
                    if (!analistasCount[cliente.analistaNome]) {
                        analistasCount[cliente.analistaNome] = 0;
                    }
                    analistasCount[cliente.analistaNome]++;
                });
                
                pdf.text('Avaliações por analista:', margin, 150);
                let yPos = 165;
                Object.entries(analistasCount).forEach(([analista, count]) => {
                    pdf.text(`• ${analista}: ${count} avaliações`, margin + 10, yPos);
                    yPos += 15;
                });
                
                // Tabela de avaliações
                pdf.addPage();
                addHeader(2);
                addFooter();
                
                pdf.setFontSize(16);
                pdf.setTextColor(230, 81, 0);
                pdf.text('Lista de Avaliações', margin, 40);
                
                // Preparar dados para a tabela
                const tableData = todosClientes.map(cliente => [
                    cliente.dominio,
                    cliente.analistaNome,
                    cliente.analistaArea,
                    cliente.tipo.toUpperCase(),
                    cliente.nota.toString(),
                    cliente.data
                ]);
                
                // Adicionar tabela usando o plugin autoTable
                pdf.autoTable({
                    head: [['Cliente', 'Analista', 'Área', 'Tipo', 'Nota', 'Data']],
                    body: tableData,
                    startY: 60,
                    styles: {
                        fillColor: [26, 35, 126],
                        textColor: [224, 247, 255],
                        fontSize: 9
                    },
                    headStyles: {
                        fillColor: [230, 81, 0],
                        textColor: [26, 35, 126],
                        fontSize: 10,
                        fontStyle: 'bold'
                    },
                    alternateRowStyles: {
                        fillColor: [26, 35, 126]
                    },
                    columnStyles: {
                        0: { cellWidth: 40 },
                        1: { cellWidth: 35 },
                        2: { cellWidth: 25 },
                        3: { cellWidth: 15 },
                        4: { cellWidth: 15 },
                        5: { cellWidth: 25 }
                    },
                    margin: { left: margin, right: margin }
                });
                
                // Salvar PDF
                const data = new Date().toLocaleDateString('pt-BR').replace(/\//g, '-');
                pdf.save(`avaliacoes_clientes_${data}.pdf`);
                
                hideLoading();
                mostrarStatus('✅ Relatório de avaliações gerado com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao gerar PDF:', error);
                hideLoading();
                mostrarStatus('❌ Erro ao gerar PDF. Tente novamente.', 'error');
            }
        }

        // Funções de Exportação Modal
        function abrirModalExportacao() {
            document.getElementById('exportModal').style.display = 'block';
        }

        function fecharModalExportacao() {
            document.getElementById('exportModal').style.display = 'none';
        }

        function selecionarQualidade(qualidade) {
            qualidadeExportacao = qualidade;
            document.querySelectorAll('.quality-option').forEach(option => {
                option.classList.remove('selected');
            });
            event.currentTarget.classList.add('selected');
        }

        // Funções de Exportação Aprimoradas - E-book Style
        async function exportarPDFCompleto() {
            fecharModalExportacao();
            mostrarStatus('⏳ Gerando relatório completo...', 'info');
            showLoading();
            
            try {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('p', 'mm', 'a4');
                const pageWidth = pdf.internal.pageSize.getWidth();
                const pageHeight = pdf.internal.pageSize.getHeight();
                
                // Página 1: Capa E-book
                await adicionarCapaEbook(pdf, 'Relatório Completo de Performance');
                
                // Página 2: Índice
                pdf.addPage();
                await adicionarIndice(pdf);
                
                // Página 3: Métricas Consolidadas
                pdf.addPage();
                await adicionarMetricasConsolidadasEbook(pdf);
                
                // Página 4: Gráfico Principal
                pdf.addPage();
                await adicionarGraficoPrincipalEbook(pdf);
                
                // Páginas 5+: Análise Detalhada por Analista
                const filtroArea = document.getElementById('filtroArea').value;
                let analistasFiltrados = filtroArea === 'todos' 
                    ? analistas 
                    : analistas.filter(a => a.area === filtroArea);
                
                if (ordenacaoAtual.campo) {
                    analistasFiltrados = aplicarOrdenacao(analistasFiltrados);
                }
                
                for (let i = 0; i < analistasFiltrados.length; i++) {
                    pdf.addPage();
                    await adicionarAnalistaDetalhadoEbook(pdf, analistasFiltrados[i], i + 1);
                }
                
                // Página final: Tabela Consolidada
                pdf.addPage();
                await adicionarTabelaConsolidadaEbook(pdf);
                
                // Salvar PDF
                const data = new Date().toLocaleDateString('pt-BR').replace(/\//g, '-');
                pdf.save(`relatorio_completo_nps_${data}.pdf`);
                
                hideLoading();
                mostrarStatus('✅ Relatório completo gerado com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao gerar PDF:', error);
                hideLoading();
                mostrarStatus('❌ Erro ao gerar PDF. Tente novamente.', 'error');
            }
        }

        async function exportarPDFResumido() {
            fecharModalExportacao();
            mostrarStatus('⏳ Gerando relatório resumido...', 'info');
            showLoading();
            
            try {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('p', 'mm', 'a4');
                
                // Página 1: Capa E-book
                await adicionarCapaEbook(pdf, 'Relatório Resumido de Performance');
                
                // Página 2: Índice
                pdf.addPage();
                await adicionarIndiceResumido(pdf);
                
                // Página 3: Métricas e Gráfico
                pdf.addPage();
                await adicionarMetricasConsolidadasEbook(pdf);
                
                pdf.addPage();
                await adicionarGraficoPrincipalEbook(pdf);
                
                // Página 4: Tabela Resumida
                pdf.addPage();
                await adicionarTabelaResumidaEbook(pdf);
                
                // Salvar PDF
                const data = new Date().toLocaleDateString('pt-BR').replace(/\//g, '-');
                pdf.save(`relatorio_resumido_nps_${data}.pdf`);
                
                hideLoading();
                mostrarStatus('✅ Relatório resumido gerado com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao gerar PDF:', error);
                hideLoading();
                mostrarStatus('❌ Erro ao gerar PDF. Tente novamente.', 'error');
            }
        }

        async function exportarPDFAnalistas() {
            fecharModalExportacao();
            mostrarStatus('⏳ Gerando relatórios individuais...', 'info');
            showLoading();
            
            try {
                const { jsPDF } = window.jspdf;
                const filtroArea = document.getElementById('filtroArea').value;
                let analistasFiltrados = filtroArea === 'todos' 
                    ? analistas 
                    : analistas.filter(a => a.area === filtroArea);
                
                if (ordenacaoAtual.campo) {
                    analistasFiltrados = aplicarOrdenacao(analistasFiltrados);
                }
                
                for (const analista of analistasFiltrados) {
                    const pdf = new jsPDF('p', 'mm', 'a4');
                    
                    // Capa individual E-book
                    await adicionarCapaAnalistaEbook(pdf, analista);
                    
                    // Índice
                    pdf.addPage();
                    await adicionarIndiceAnalista(pdf);
                    
                    // Métricas individuais
                    pdf.addPage();
                    await adicionarMetricasIndividuaisEbook(pdf, analista);
                    
                    // Gráficos individuais
                    pdf.addPage();
                    await adicionarGraficosIndividuaisEbook(pdf, analista);
                    
                    // Lista de clientes
                    if (analista.clientes && analista.clientes.length > 0) {
                        pdf.addPage();
                        await adicionarListaClientesEbook(pdf, analista);
                    }
                    
                    // Salvar PDF individual
                    const nomeSanitizado = analista.nome.replace(/[^a-zA-Z0-9]/g, '_');
                    const data = new Date().toLocaleDateString('pt-BR').replace(/\//g, '-');
                    pdf.save(`relatorio_${nomeSanitizado}_${data}.pdf`);
                }
                
                hideLoading();
                mostrarStatus(`✅ ${analistasFiltrados.length} relatórios individuais gerados!`, 'success');
                
            } catch (error) {
                console.error('Erro ao gerar PDFs:', error);
                hideLoading();
                mostrarStatus('❌ Erro ao gerar PDFs. Tente novamente.', 'error');
            }
        }

        // Função de exportação individual do analista - VERSÃO E-BOOK
        async function exportarAnalistaPDF() {
            const analistaId = document.getElementById('selecionarAnalista').value;
            if (!analistaId) {
                mostrarStatus('Selecione um analista primeiro', 'error');
                return;
            }
            
            mostrarStatus('⏳ Gerando relatório e-book...', 'info');
            showLoading();
            
            try {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('p', 'mm', 'a4');
                const analista = analistas.find(a => a.id == analistaId);
                
                // Configurações de margem
                const margin = 20;
                const pageWidth = pdf.internal.pageSize.getWidth();
                const pageHeight = pdf.internal.pageSize.getHeight();
                const contentWidth = pageWidth - (margin * 2);
                
                // Adicionar cabeçalho em todas as páginas
                const addHeader = (pageNumber) => {
                    // Background do cabeçalho
                    pdf.setFillColor(26, 35, 126);
                    pdf.rect(0, 0, pageWidth, 25, 'F');
                    
                    // Linha decorativa
                    pdf.setDrawColor(230, 81, 0);
                    pdf.setLineWidth(0.5);
                    pdf.line(0, 25, pageWidth, 25);
                    
                    // Título
                    pdf.setFontSize(12);
                    pdf.setTextColor(230, 81, 0);
                    pdf.text('RELATÓRIO DE DESEMPENHO INDIVIDUAL', margin, 17);
                    
                    // Número da página
                    pdf.setFontSize(8);
                    pdf.setTextColor(255, 255, 255);
                    pdf.text(`Página ${pageNumber}`, pageWidth - margin, 17, { align: 'right' });
                };
                
                // Adicionar rodapé em todas as páginas
                const addFooter = () => {
                    pdf.setFillColor(26, 35, 126);
                    pdf.rect(0, pageHeight - 15, pageWidth, 15, 'F');
                    
                    pdf.setDrawColor(230, 81, 0);
                    pdf.setLineWidth(0.5);
                    pdf.line(0, pageHeight - 15, pageWidth, pageHeight - 15);
                    
                    pdf.setFontSize(8);
                    pdf.setTextColor(176, 190, 197);
                    pdf.text('Ideal NPS Implementation - Dashboard de Performance', margin, pageHeight - 7);
                };
                
                // Página 1: Capa E-book
                addHeader(1);
                addFooter();
                
                // Background da capa
                pdf.setFillColor(26, 35, 126);
                pdf.rect(0, 0, pageWidth, pageHeight, 'F');
                
                // Título principal
                pdf.setFontSize(28);
                pdf.setTextColor(230, 81, 0);
                pdf.text('IDEAL NPS', pageWidth / 2, 60, { align: 'center' });
                
                pdf.setFontSize(20);
                pdf.setTextColor(255, 110, 64);
                pdf.text('Relatório de Desempenho', pageWidth / 2, 80, { align: 'center' });
                
                // Nome do analista
                pdf.setFontSize(24);
                pdf.setTextColor(0, 230, 118);
                pdf.text(analista.nome.toUpperCase(), pageWidth / 2, 110, { align: 'center' });
                
                // Área
                pdf.setFontSize(16);
                pdf.setTextColor(255, 255, 255);
                const areaTexto = analista.area === 'onboarding' ? 'ONBOARDING' : 'RENOVAÇÃO';
                pdf.text(`Área: ${areaTexto}`, pageWidth / 2, 130, { align: 'center' });
                
                // Data de geração
                pdf.setFontSize(12);
                pdf.setTextColor(176, 190, 197);
                const agora = new Date();
                pdf.text(`Gerado em: ${agora.toLocaleDateString('pt-BR')} às ${agora.toLocaleTimeString('pt-BR')}`, 
                        pageWidth / 2, 160, { align: 'center' });
                
                // Elemento decorativo
                pdf.setDrawColor(230, 81, 0);
                pdf.setLineWidth(1);
                pdf.line(margin, 180, pageWidth - margin, 180);
                
                // Página 2: Índice
                pdf.addPage();
                addHeader(2);
                addFooter();
                let yPos = 40;
                
                // Título da seção
                pdf.setFontSize(18);
                pdf.setTextColor(230, 81, 0);
                pdf.text('Índice', margin, yPos);
                yPos += 25;
                
                // Itens do índice
                pdf.setFontSize(12);
                pdf.setTextColor(255, 255, 255);
                pdf.text('1. Resumo Executivo', margin, yPos);
                yPos += 15;
                pdf.text('2. Análise Detalhada de Desempenho', margin, yPos);
                yPos += 15;
                pdf.text('3. Visualização Gráfica', margin, yPos);
                yPos += 15;
                pdf.text('4. Metas e Progresso', margin, yPos);
                yPos += 15;
                if (analista.clientes && analista.clientes.length > 0) {
                    pdf.text('5. Registro de Clientes', margin, yPos);
                    yPos += 15;
                    pdf.text('6. Recomendações e Próximos Passos', margin, yPos);
                } else {
                    pdf.text('5. Recomendações e Próximos Passos', margin, yPos);
                }
                
                // Página 3: Resumo Executivo
                pdf.addPage();
                addHeader(3);
                addFooter();
                yPos = 40;
                
                // Título da seção
                pdf.setFontSize(18);
                pdf.setTextColor(230, 81, 0);
                pdf.text('1. Resumo Executivo', margin, yPos);
                yPos += 25;
                
                // Informações básicas
                pdf.setFontSize(12);
                pdf.setTextColor(255, 255, 255);
                pdf.text(`Analista: ${analista.nome}`, margin, yPos);
                yPos += 10;
                pdf.text(`Área: ${analista.area === 'onboarding' ? 'Onboarding' : 'Renovação'}`, margin, yPos);
                yPos += 10;
                pdf.text(`Período: Todas as avaliações`, margin, yPos);
                yPos += 25;
                
                // Métricas principais em cards
                const csat = calcularCSAT(analista);
                const nps = calcularNPS(analista);
                const totalAvaliacoes = calcularTotalAvaliacoes(analista);
                
                // Card CSAT
                pdf.setFillColor(230, 81, 0, 0.1);
                pdf.setDrawColor(230, 81, 0);
                pdf.roundedRect(margin, yPos, contentWidth / 3 - 10, 40, 5, 5, 'FD');
                pdf.setFontSize(10);
                pdf.setTextColor(230, 81, 0);
                pdf.text('CSAT', margin + (contentWidth / 3 - 10) / 2, yPos + 15, { align: 'center' });
                pdf.setFontSize(20);
                pdf.text(`${csat}%`, margin + (contentWidth / 3 - 10) / 2, yPos + 32, { align: 'center' });
                
                // Card NPS
                pdf.setFillColor(0, 230, 118, 0.1);
                pdf.setDrawColor(0, 230, 118);
                pdf.roundedRect(margin + contentWidth / 3, yPos, contentWidth / 3 - 10, 40, 5, 5, 'FD');
                pdf.setFontSize(10);
                pdf.setTextColor(0, 230, 118);
                pdf.text('NPS', margin + contentWidth / 3 + (contentWidth / 3 - 10) / 2, yPos + 15, { align: 'center' });
                pdf.setFontSize(20);
                pdf.text(nps, margin + contentWidth / 3 + (contentWidth / 3 - 10) / 2, yPos + 32, { align: 'center' });
                
                // Card Total
                pdf.setFillColor(255, 214, 0, 0.1);
                pdf.setDrawColor(255, 214, 0);
                pdf.roundedRect(margin + 2 * contentWidth / 3, yPos, contentWidth / 3 - 10, 40, 5, 5, 'FD');
                pdf.setFontSize(10);
                pdf.setTextColor(255, 214, 0);
                pdf.text('Total Avaliações', margin + 2 * contentWidth / 3 + (contentWidth / 3 - 10) / 2, yPos + 15, { align: 'center' });
                pdf.setFontSize(20);
                pdf.text(totalAvaliacoes.toString(), margin + 2 * contentWidth / 3 + (contentWidth / 3 - 10) / 2, yPos + 32, { align: 'center' });
                
                yPos += 60;
                
                // Classificação geral
                pdf.setFontSize(14);
                pdf.setTextColor(230, 81, 0);
                pdf.text('Classificação Geral', margin, yPos);
                yPos += 15;
                
                let classificacao = '';
                let classificacaoCor = [255, 255, 255];
                
                if (parseFloat(csat) >= 80 && parseFloat(nps) >= 50) {
                    classificacao = 'Excelente';
                    classificacaoCor = [0, 230, 118];
                } else if (parseFloat(csat) >= 60 && parseFloat(nps) >= 0) {
                    classificacao = 'Bom';
                    classificacaoCor = [230, 81, 0];
                } else if (parseFloat(csat) >= 40 && parseFloat(nps) >= -20) {
                    classificacao = 'Regular';
                    classificacaoCor = [255, 214, 0];
                } else {
                    classificacao = 'Necessita Atenção';
                    classificacaoCor = [255, 23, 68];
                }
                
                pdf.setFontSize(16);
                pdf.setTextColor(classificacaoCor[0], classificacaoCor[1], classificacaoCor[2]);
                pdf.text(classificacao, margin, yPos);
                
                // Salvar PDF
                const nomeSanitizado = analista.nome.replace(/[^a-zA-Z0-9]/g, '_');
                const data = new Date().toLocaleDateString('pt-BR').replace(/\//g, '-');
                pdf.save(`relatorio_${nomeSanitizado}_${data}.pdf`);
                
                hideLoading();
                mostrarStatus('✅ Relatório e-book gerado com sucesso!', 'success');
                
            } catch (error) {
                console.error('Erro ao gerar PDF:', error);
                hideLoading();
                mostrarStatus('❌ Erro ao gerar PDF. Tente novamente.', 'error');
            }
        }

        // Funções auxiliares para exportação E-book
        async function adicionarCapaEbook(pdf, titulo) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            const pageHeight = pdf.internal.pageSize.getHeight();
            
            // Background
            pdf.setFillColor(26, 35, 126);
            pdf.rect(0, 0, pageWidth, pageHeight, 'F');
            
            // Título principal
            pdf.setFontSize(32);
            pdf.setTextColor(230, 81, 0);
            pdf.text('IDEAL NPS', pageWidth / 2, 60, { align: 'center' });
            
            pdf.setFontSize(24);
            pdf.setTextColor(255, 110, 64);
            pdf.text(titulo, pageWidth / 2, 80, { align: 'center' });
            
            // Data e hora
            const agora = new Date();
            pdf.setFontSize(14);
            pdf.setTextColor(176, 190, 197);
            pdf.text(`Gerado em: ${agora.toLocaleDateString('pt-BR')} ${agora.toLocaleTimeString('pt-BR')}`, 
                    pageWidth / 2, pageHeight - 40, { align: 'center' });
            
            // Rodapé
            pdf.setFontSize(12);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Dashboard de Performance - Ideal NPS Implementation', pageWidth / 2, pageHeight - 20, { align: 'center' });
            
            // Elemento decorativo
            pdf.setDrawColor(230, 81, 0);
            pdf.setLineWidth(1);
            pdf.line(pageWidth / 4, 100, pageWidth * 3/4, 100);
        }

        async function adicionarIndice(pdf) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            let yPos = 40;
            
            // Título
            pdf.setFontSize(20);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Índice', pageWidth / 2, yPos, { align: 'center' });
            yPos += 30;
            
            // Itens do índice
            pdf.setFontSize(14);
            pdf.setTextColor(255, 255, 255);
            pdf.text('1. Métricas Consolidadas', 40, yPos);
            yPos += 20;
            pdf.text('2. Gráfico Principal', 40, yPos);
            yPos += 20;
            pdf.text('3. Análise Detalhada por Analista', 40, yPos);
            yPos += 20;
            pdf.text('4. Tabela Consolidada', 40, yPos);
            
            // Números das páginas
            yPos = 70;
            pdf.setTextColor(176, 190, 197);
            pdf.text('3', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('4', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('5', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('6', pageWidth - 40, yPos, { align: 'right' });
        }

        async function adicionarIndiceResumido(pdf) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            let yPos = 40;
            
            // Título
            pdf.setFontSize(20);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Índice', pageWidth / 2, yPos, { align: 'center' });
            yPos += 30;
            
            // Itens do índice
            pdf.setFontSize(14);
            pdf.setTextColor(255, 255, 255);
            pdf.text('1. Métricas Consolidadas', 40, yPos);
            yPos += 20;
            pdf.text('2. Gráfico Principal', 40, yPos);
            yPos += 20;
            pdf.text('3. Tabela Resumida', 40, yPos);
            
            // Números das páginas
            yPos = 70;
            pdf.setTextColor(176, 190, 197);
            pdf.text('3', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('4', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('5', pageWidth - 40, yPos, { align: 'right' });
        }

        async function adicionarIndiceAnalista(pdf) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            let yPos = 40;
            
            // Título
            pdf.setFontSize(20);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Índice', pageWidth / 2, yPos, { align: 'center' });
            yPos += 30;
            
            // Itens do índice
            pdf.setFontSize(14);
            pdf.setTextColor(255, 255, 255);
            pdf.text('1. Resumo Executivo', 40, yPos);
            yPos += 20;
            pdf.text('2. Análise Detalhada de Desempenho', 40, yPos);
            yPos += 20;
            pdf.text('3. Visualização Gráfica', 40, yPos);
            yPos += 20;
            pdf.text('4. Metas e Progresso', 40, yPos);
            yPos += 20;
            pdf.text('5. Recomendações e Próximos Passos', 40, yPos);
            
            // Números das páginas
            yPos = 70;
            pdf.setTextColor(176, 190, 197);
            pdf.text('3', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('4', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('5', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('6', pageWidth - 40, yPos, { align: 'right' });
            yPos += 20;
            pdf.text('7', pageWidth - 40, yPos, { align: 'right' });
        }

        async function adicionarCapaAnalistaEbook(pdf, analista) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            const pageHeight = pdf.internal.pageSize.getHeight();
            
            // Background
            pdf.setFillColor(26, 35, 126);
            pdf.rect(0, 0, pageWidth, pageHeight, 'F');
            
            // Título principal
            pdf.setFontSize(28);
            pdf.setTextColor(230, 81, 0);
            pdf.text('RELATÓRIO INDIVIDUAL', pageWidth / 2, 50, { align: 'center' });
            
            pdf.setFontSize(22);
            pdf.setTextColor(255, 110, 64);
            pdf.text('DESEMPENHO', pageWidth / 2, 75, { align: 'center' });
            
            pdf.setFontSize(20);
            pdf.text(analista.nome.toUpperCase(), pageWidth / 2, 100, { align: 'center' });
            
            // Área
            pdf.setFontSize(16);
            pdf.setTextColor(255, 255, 255);
            pdf.text(`Área: ${analista.area === 'onboarding' ? 'Onboarding' : 'Renovação'}`, pageWidth / 2, 130, { align: 'center' });
            
            // Data e hora
            const agora = new Date();
            pdf.setFontSize(12);
            pdf.setTextColor(176, 190, 197);
            pdf.text(`Gerado em: ${agora.toLocaleDateString('pt-BR')} ${agora.toLocaleTimeString('pt-BR')}`, 
                    pageWidth / 2, pageHeight - 40, { align: 'center' });
            
            // Elemento decorativo
            pdf.setDrawColor(230, 81, 0);
            pdf.setLineWidth(1);
            pdf.line(pageWidth / 4, 150, pageWidth * 3/4, 150);
        }

        async function adicionarMetricasIndividuaisEbook(pdf, analista) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            
            // Título
            pdf.setFontSize(20);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Métricas de Desempenho', 20, 30);
            
            // Informações básicas
            pdf.setFontSize(14);
            pdf.setTextColor(255, 255, 255);
            pdf.text(`Analista: ${analista.nome}`, 20, 50);
            pdf.text(`Área: ${analista.area === 'onboarding' ? 'Onboarding' : 'Renovação'}`, 20, 65);
            
            // Métricas calculadas
            const csat = calcularCSAT(analista);
            const nps = calcularNPS(analista);
            const totalAvaliacoes = calcularTotalAvaliacoes(analista);
            const metaCSAT = metas.individuais[analista.id] && metas.individuais[analista.id].csat;
            const metaNPS = metas.individuais[analista.id] && metas.individuais[analista.id].nps;
            
            // Cards grandes
            const cardWidth = 80;
            const cardHeight = 50;
            const cardY = 85;
            
            // Card CSAT
            pdf.setFillColor(230, 81, 0, 0.1);
            pdf.rect(20, cardY, cardWidth, cardHeight, 'F');
            pdf.setDrawColor(230, 81, 0);
            pdf.rect(20, cardY, cardWidth, cardHeight);
            pdf.setFontSize(10);
            pdf.setTextColor(230, 81, 0);
            pdf.text('CSAT', 60, cardY + 20, { align: 'center' });
            pdf.setFontSize(24);
            pdf.text(`${csat}%`, 60, cardY + 40, { align: 'center' });
            
            // Card NPS
            pdf.setFillColor(0, 230, 118, 0.1);
            pdf.rect(110, cardY, cardWidth, cardHeight, 'F');
            pdf.setDrawColor(0, 230, 118);
            pdf.rect(110, cardY, cardWidth, cardHeight);
            pdf.setFontSize(10);
            pdf.setTextColor(0, 230, 118);
            pdf.text('NPS', 150, cardY + 20, { align: 'center' });
            pdf.setFontSize(24);
            pdf.text(nps, 150, cardY + 40, { align: 'center' });
            
            // Card Total
            pdf.setFillColor(255, 214, 0, 0.1);
            pdf.rect(200, cardY, cardWidth, cardHeight, 'F');
            pdf.setDrawColor(255, 214, 0);
            pdf.rect(200, cardY, cardWidth, cardHeight);
            pdf.setFontSize(10);
            pdf.setTextColor(255, 214, 0);
            pdf.text('Total Aval.', 240, cardY + 20, { align: 'center' });
            pdf.setFontSize(24);
            pdf.text(totalAvaliacoes.toString(), 240, cardY + 40, { align: 'center' });
            
            // Análise detalhada
            pdf.setFontSize(16);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Análise Detalhada', 20, 160);
            
            pdf.setFontSize(12);
            pdf.setTextColor(255, 255, 255);
            
            // Calcular estatísticas detalhadas
            let totalCSAT = 0;
            let respondentesCSAT = 0;
            let promotores = 0;
            let detratores = 0;
            let neutros = 0;
            
            for (let i = 0; i < 10; i++) {
                const qtd = analista.csat[i] || 0;
                totalCSAT += (i + 1) * qtd;
                respondentesCSAT += qtd;
            }
            
            for (let i = 0; i <= 10; i++) {
                const qtd = analista.nps[i] || 0;
                if (i >= 9) promotores += qtd;
                else if (i <= 6) detratores += qtd;
                else neutros += qtd;
            }
            
            const mediaNotasCSAT = respondentesCSAT > 0 ? (totalCSAT / respondentesCSAT).toFixed(1) : "0.0";
            const totalNPS = promotores + detratores + neutros;
            
            pdf.text(`• Média de notas CSAT: ${mediaNotasCSAT}`, 20, 180);
            pdf.text(`• Total de respondentes CSAT: ${respondentesCSAT}`, 20, 195);
            pdf.text(`• Promotores NPS: ${promotores} (${totalNPS > 0 ? Math.round(promotores/totalNPS*100) : 0}%)`, 20, 210);
            pdf.text(`• Neutros NPS: ${neutros} (${totalNPS > 0 ? Math.round(neutros/totalNPS*100) : 0}%)`, 20, 225);
            pdf.text(`• Detratores NPS: ${detratores} (${totalNPS > 0 ? Math.round(detratores/totalNPS*100) : 0}%)`, 20, 240);
            
            // Classificação
            pdf.setFontSize(14);
            pdf.setTextColor(0, 230, 118);
            pdf.text(`Classificação Geral: ${classificacao}`, 20, 260);
        }

        // Função para adicionar gráficos diretamente no PDF - VERSÃO E-BOOK
        async function adicionarGraficosIndividuaisEbook(pdf, analista) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            
            // Título
            pdf.setFontSize(20);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Gráficos de Desempenho', 20, 30);
            
            // Gráfico CSAT
            pdf.setFontSize(16);
            pdf.text('Distribuição CSAT', 20, 50);
            
            // Desenhar gráfico de barras CSAT diretamente no PDF
            const chartX = 20;
            const chartY = 60;
            const chartWidth = 170;
            const chartHeight = 120;
            const barWidth = chartWidth / 10;
            
            // Desenhar eixos
            pdf.setDrawColor(255, 255, 255);
            pdf.line(chartX, chartY + chartHeight, chartX + chartWidth, chartY + chartHeight); // Eixo X
            pdf.line(chartX, chartY, chartX, chartY + chartHeight); // Eixo Y
            
            // Desenhar barras e labels
            pdf.setFontSize(8);
            pdf.setTextColor(255, 255, 255);
            
            for (let i = 0; i < 10; i++) {
                const barHeight = (analista.csat[i] / Math.max(...analista.csat, 1)) * chartHeight;
                const barX = chartX + i * barWidth;
                
                // Desenhar barra
                pdf.setFillColor(230, 81, 0, 0.8);
                pdf.rect(barX + 2, chartY + chartHeight - barHeight, barWidth - 4, barHeight, 'F');
                
                // Label do eixo X
                pdf.text((i + 1).toString(), barX + barWidth/2, chartY + chartHeight + 10, { align: 'center' });
                
                // Valor da barra
                if (analista.csat[i] > 0) {
                    pdf.text(analista.csat[i].toString(), barX + barWidth/2, chartY + chartHeight - barHeight - 5, { align: 'center' });
                }
            }
            
            // Gráfico NPS
            pdf.setFontSize(16);
            pdf.text('Distribuição NPS', 20, 200);
            
            // Desenhar gráfico de barras NPS diretamente no PDF
            const npsChartX = 20;
            const npsChartY = 210;
            const npsChartWidth = 170;
            const npsChartHeight = 120;
            const npsBarWidth = npsChartWidth / 11;
            
            // Desenhar eixos
            pdf.setDrawColor(255, 255, 255);
            pdf.line(npsChartX, npsChartY + npsChartHeight, npsChartX + npsChartWidth, npsChartY + npsChartHeight); // Eixo X
            pdf.line(npsChartX, npsChartY, npsChartX, npsChartY + npsChartHeight); // Eixo Y
            
            // Desenhar barras e labels
            pdf.setFontSize(8);
            pdf.setTextColor(255, 255, 255);
            
            for (let i = 0; i <= 10; i++) {
                const barHeight = (analista.nps[i] / Math.max(...analista.nps, 1)) * npsChartHeight;
                const barX = npsChartX + i * npsBarWidth;
                
                // Definir cor com base na categoria NPS
                if (i <= 6) {
                    pdf.setFillColor(255, 23, 68, 0.8);
                } else if (i <= 8) {
                    pdf.setFillColor(255, 214, 0, 0.8);
                } else {
                    pdf.setFillColor(0, 230, 118, 0.8);
                }
                
                // Desenhar barra
                pdf.rect(barX + 2, npsChartY + npsChartHeight - barHeight, npsBarWidth - 4, barHeight, 'F');
                
                // Label do eixo X
                pdf.text(i.toString(), barX + npsBarWidth/2, npsChartY + npsChartHeight + 10, { align: 'center' });
                
                // Valor da barra
                if (analista.nps[i] > 0) {
                    pdf.text(analista.nps[i].toString(), barX + npsBarWidth/2, npsChartY + npsChartHeight - barHeight - 5, { align: 'center' });
                }
            }
            
            // Legenda NPS
            pdf.setFontSize(12);
            pdf.setTextColor(255, 23, 68);
            pdf.rect(20, 340, 10, 10, 'F');
            pdf.text('Detratores (0-6)', 35, 348);
            
            pdf.setTextColor(255, 214, 0);
            pdf.rect(100, 340, 10, 10, 'F');
            pdf.text('Neutros (7-8)', 115, 348);
            
            pdf.setTextColor(0, 230, 118);
            pdf.rect(180, 340, 10, 10, 'F');
            pdf.text('Promotores (9-10)', 195, 348);
        }

        async function adicionarGraficoPrincipalEbook(pdf) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            
            // Título
            pdf.setFontSize(20);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Gráfico Consolidado', 20, 30);
            
            // Obter dados do gráfico
            const filtroArea = document.getElementById('filtroArea').value;
            let analistasFiltrados = filtroArea === 'todos' 
                ? analistas 
                : analistas.filter(a => a.area === filtroArea);
            
            if (ordenacaoAtual.campo) {
                analistasFiltrados = aplicarOrdenacao(analistasFiltrados);
            }
            
            const labels = analistasFiltrados.map(a => a.nome);
            const csatData = analistasFiltrados.map(calcularCSAT);
            const npsData = analistasFiltrados.map(calcularNPS);
            
            // Desenhar gráfico de barras diretamente no PDF
            const chartX = 20;
            const chartY = 50;
            const chartWidth = pageWidth - 40;
            const chartHeight = 200;
            const barWidth = chartWidth / (labels.length * 2 + 1);
            
            // Desenhar eixos
            pdf.setDrawColor(255, 255, 255);
            pdf.line(chartX, chartY + chartHeight, chartX + chartWidth, chartY + chartHeight); // Eixo X
            pdf.line(chartX, chartY, chartX, chartY + chartHeight); // Eixo Y
            
            // Desenhar barras e labels
            pdf.setFontSize(8);
            pdf.setTextColor(255, 255, 255);
            
            // Encontrar valores máximos para normalização
            const maxCSAT = Math.max(...csatData.map(v => parseFloat(v)), 100);
            const maxNPS = Math.max(...npsData.map(v => parseFloat(v)), 100);
            
            for (let i = 0; i < labels.length; i++) {
                const labelX = chartX + (i * 2 + 0.5) * barWidth;
                
                // Barra CSAT
                const csatBarHeight = (parseFloat(csatData[i]) / maxCSAT) * chartHeight;
                pdf.setFillColor(230, 81, 0, 0.8);
                pdf.rect(labelX, chartY + chartHeight - csatBarHeight, barWidth * 0.8, csatBarHeight, 'F');
                
                // Barra NPS
                const npsBarHeight = (parseFloat(npsData[i]) / maxNPS) * chartHeight;
                pdf.setFillColor(0, 230, 118, 0.8);
                pdf.rect(labelX + barWidth * 0.9, chartY + chartHeight - npsBarHeight, barWidth * 0.8, npsBarHeight, 'F');
                
                // Label do eixo X
                const truncatedLabel = labels[i].length > 8 ? labels[i].substring(0, 8) + '...' : labels[i];
                pdf.text(truncatedLabel, labelX + barWidth * 0.85, chartY + chartHeight + 10, { align: 'center' });
            }
            
            // Legenda
            pdf.setFontSize(12);
            pdf.setTextColor(230, 81, 0);
            pdf.rect(chartX, chartY + chartHeight + 20, 10, 10, 'F');
            pdf.text('CSAT (%)', chartX + 15, chartY + chartHeight + 28);
            
            pdf.setTextColor(0, 230, 118);
            pdf.rect(chartX + 70, chartY + chartHeight + 20, 10, 10, 'F');
            pdf.text('NPS', chartX + 85, chartY + chartHeight + 28);
            
            // Análise do gráfico
            pdf.setFontSize(12);
            pdf.setTextColor(255, 255, 255);
            pdf.text('Análise do Gráfico:', 20, chartY + chartHeight + 50);
            
            pdf.setFontSize(10);
            pdf.setTextColor(255, 255, 255);
            if (analistasFiltrados.length > 0) {
                const melhorCSAT = Math.max(...analistasFiltrados.map(a => parseFloat(calcularCSAT(a))));
                const piorCSAT = Math.min(...analistasFiltrados.map(a => parseFloat(calcularCSAT(a))));
                const melhorNPS = Math.max(...analistasFiltrados.map(a => parseFloat(calcularNPS(a))));
                const piorNPS = Math.min(...analistasFiltrados.map(a => parseFloat(calcularNPS(a))));
                
                pdf.text(`• Melhor CSAT: ${melhorCSAT.toFixed(1)}%`, 20, chartY + chartHeight + 65);
                pdf.text(`• Pior CSAT: ${piorCSAT.toFixed(1)}%`, 20, chartY + chartHeight + 80);
                pdf.text(`• Melhor NPS: ${melhorNPS.toFixed(1)}`, 20, chartY + chartHeight + 95);
                pdf.text(`• Pior NPS: ${piorNPS.toFixed(1)}`, 20, chartY + chartHeight + 110);
            }
        }

        async function adicionarMetricasConsolidadasEbook(pdf) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            
            // Título
            pdf.setFontSize(20);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Métricas Consolidadas', 20, 30);
            
            // Filtros aplicados
            pdf.setFontSize(14);
            pdf.setTextColor(255, 255, 255);
            const filtroArea = document.getElementById('filtroArea').value;
            pdf.text(`Área: ${filtroArea === 'todos' ? 'Todas as Áreas' : filtroArea}`, 20, 50);
            
            if (ordenacaoAtual.campo) {
                const ordemTexto = ordenacaoAtual.direcao === 'desc' ? 'Maior' : 'Menor';
                const campoTexto = ordenacaoAtual.campo === 'avaliacoes' ? 'Quantidade de Avaliações' :
                                 ordenacaoAtual.campo === 'csat' ? 'Percentual CSAT' : 'Percentual NPS';
                pdf.text(`Ordenação: ${ordemTexto} ${campoTexto}`, 20, 65);
            }
            
            // Métricas principais
            const csatArea = document.querySelector('#csatArea .score-value').textContent;
            const npsArea = document.querySelector('#npsArea .score-value').textContent;
            
            // Cards de métricas
            const cardWidth = 80;
            const cardHeight = 40;
            const cardY = 85;
            
            // Card CSAT
            pdf.setFillColor(230, 81, 0, 0.1);
            pdf.rect(20, cardY, cardWidth, cardHeight, 'F');
            pdf.setDrawColor(230, 81, 0);
            pdf.rect(20, cardY, cardWidth, cardHeight);
            pdf.setFontSize(10);
            pdf.setTextColor(230, 81, 0);
            pdf.text('CSAT da Área', 60, cardY + 15, { align: 'center' });
            pdf.setFontSize(16);
            pdf.text(csatArea, 60, cardY + 30, { align: 'center' });
            
            // Card NPS
            pdf.setFillColor(0, 230, 118, 0.1);
            pdf.rect(110, cardY, cardWidth, cardHeight, 'F');
            pdf.setDrawColor(0, 230, 118);
            pdf.rect(110, cardY, cardWidth, cardHeight);
            pdf.setFontSize(10);
            pdf.setTextColor(0, 230, 118);
            pdf.text('NPS da Área', 150, cardY + 15, { align: 'center' });
            pdf.setFontSize(16);
            pdf.text(npsArea, 150, cardY + 30, { align: 'center' });
            
            // Análise detalhada
            pdf.setFontSize(16);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Análise Detalhada', 20, 140);
            
            const filtroArea2 = document.getElementById('filtroArea').value;
            let analistasFiltrados = filtroArea2 === 'todos' 
                ? analistas 
                : analistas.filter(a => a.area === filtroArea2);
            
            if (ordenacaoAtual.campo) {
                analistasFiltrados = aplicarOrdenacao(analistasFiltrados);
            }
            
            // Calcular estatísticas
            let totalAnalistas = analistasFiltrados.length;
            let totalAvaliacoes = 0;
            let somaCSAT = 0;
            let somaNPS = 0;
            
            analistasFiltrados.forEach(analista => {
                totalAvaliacoes += calcularTotalAvaliacoes(analista);
                somaCSAT += parseFloat(calcularCSAT(analista));
                somaNPS += parseFloat(calcularNPS(analista));
            });
            
            const mediaCSAT = totalAnalistas > 0 ? (somaCSAT / totalAnalistas).toFixed(1) : "0.0";
            const mediaNPS = totalAnalistas > 0 ? (somaNPS / totalAnalistas).toFixed(1) : "0.0";
            
            pdf.setFontSize(12);
            pdf.setTextColor(255, 255, 255);
            pdf.text(`Total de Analistas: ${totalAnalistas}`, 20, 160);
            pdf.text(`Total de Avaliações: ${totalAvaliacoes}`, 20, 175);
            pdf.text(`Média CSAT: ${mediaCSAT}%`, 20, 190);
            pdf.text(`Média NPS: ${mediaNPS}`, 20, 205);
            
            // Metas da área
            if (metas.area.csat || metas.area.nps) {
                pdf.setFontSize(14);
                pdf.setTextColor(230, 81, 0);
                pdf.text('Metas da Área:', 20, 225);
                
                pdf.setFontSize(10);
                pdf.setTextColor(255, 255, 255);
                
                if (metas.area.csat) {
                    const progressoCSAT = Math.min((parseFloat(mediaCSAT) / metas.area.csat.valor) * 100, 100);
                    pdf.text(`• Meta CSAT: ${metas.area.csat.valor}% (${metas.area.csat.periodo})`, 20, 240);
                    pdf.text(`  Progresso: ${progressoCSAT.toFixed(1)}%`, 20, 250);
                    
                    if (parseFloat(mediaCSAT) >= metas.area.csat.valor) {
                        pdf.setTextColor(0, 230, 118);
                        pdf.text('  ✓ Meta atingida!', 20, 260);
                        pdf.setTextColor(255, 255, 255);
                    }
                }
                
                if (metas.area.nps) {
                    const progressoNPS = Math.min((parseFloat(mediaNPS) / metas.area.nps.valor) * 100, 100);
                    pdf.text(`• Meta NPS: ${metas.area.nps.valor} (${metas.area.nps.periodo})`, 20, 270);
                    pdf.text(`  Progresso: ${progressoNPS.toFixed(1)}%`, 20, 280);
                    
                    if (parseFloat(mediaNPS) >= metas.area.nps.valor) {
                        pdf.setTextColor(0, 230, 118);
                        pdf.text('  ✓ Meta atingida!', 20, 290);
                    }
                }
            }
        }

        async function adicionarAnalistaDetalhadoEbook(pdf, analista, numero) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            
            // Cabeçalho
            pdf.setFontSize(18);
            pdf.setTextColor(230, 81, 0);
            pdf.text(`${numero}. ${analista.nome}`, 20, 30);
            
            pdf.setFontSize(14);
            pdf.setTextColor(255, 255, 255);
            pdf.text(`Área: ${analista.area === 'onboarding' ? 'Onboarding' : 'Renovação'}`, 20, 45);
            
            // Métricas individuais
            const csat = calcularCSAT(analista);
            const nps = calcularNPS(analista);
            const totalAvaliacoes = calcularTotalAvaliacoes(analista);
            const metaCSAT = metas.individuais[analista.id] && metas.individuais[analista.id].csat;
            const metaNPS = metas.individuais[analista.id] && metas.individuais[analista.id].nps;
            
            // Cards de métricas
            const cardWidth = 50;
            const cardHeight = 30;
            const cardY = 60;
            
            // Card CSAT
            pdf.setFillColor(230, 81, 0, 0.1);
            pdf.rect(20, cardY, cardWidth, cardHeight, 'F');
            pdf.setDrawColor(230, 81, 0);
            pdf.rect(20, cardY, cardWidth, cardHeight);
            pdf.setFontSize(8);
            pdf.setTextColor(230, 81, 0);
            pdf.text('CSAT', 45, cardY + 12, { align: 'center' });
            pdf.setFontSize(14);
            pdf.text(`${csat}%`, 45, cardY + 24, { align: 'center' });
            
            // Card NPS
            pdf.setFillColor(0, 230, 118, 0.1);
            pdf.rect(80, cardY, cardWidth, cardHeight, 'F');
            pdf.setDrawColor(0, 230, 118);
            pdf.rect(80, cardY, cardWidth, cardHeight);
            pdf.setFontSize(8);
            pdf.setTextColor(0, 230, 118);
            pdf.text('NPS', 105, cardY + 12, { align: 'center' });
            pdf.setFontSize(14);
            pdf.text(nps, 105, cardY + 24, { align: 'center' });
            
            // Card Avaliações
            pdf.setFillColor(255, 214, 0, 0.1);
            pdf.rect(140, cardY, cardWidth, cardHeight, 'F');
            pdf.setDrawColor(255, 214, 0);
            pdf.rect(140, cardY, cardWidth, cardHeight);
            pdf.setFontSize(8);
            pdf.setTextColor(255, 214, 0);
            pdf.text('Avaliações', 165, cardY + 12, { align: 'center' });
            pdf.setFontSize(14);
            pdf.text(totalAvaliacoes.toString(), 165, cardY + 24, { align: 'center' });
            
            // Distribuição de notas CSAT
            pdf.setFontSize(14);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Distribuição CSAT:', 20, 110);
            
            pdf.setFontSize(10);
            pdf.setTextColor(255, 255, 255);
            let yPos = 125;
            for (let i = 0; i < 10; i++) {
                const qtd = analista.csat[i] || 0;
                if (qtd > 0) {
                    pdf.text(`Nota ${i + 1}: ${qtd} avaliações`, 20, yPos);
                    yPos += 15;
                }
            }
            
            // Distribuição de notas NPS
            pdf.setFontSize(14);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Distribuição NPS:', 120, 110);
            
            pdf.setFontSize(10);
            pdf.setTextColor(255, 255, 255);
            yPos = 125;
            for (let i = 0; i <= 10; i++) {
                const qtd = analista.nps[i] || 0;
                if (qtd > 0) {
                    const categoria = i <= 6 ? 'Detrator' : i <= 8 ? 'Neutro' : 'Promotor';
                    pdf.text(`Nota ${i}: ${qtd} (${categoria})`, 120, yPos);
                    yPos += 15;
                }
            }
            
            // Análise qualitativa
            if (yPos > 200) {
                pdf.addPage();
                yPos = 30;
            }
            
            pdf.setFontSize(14);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Análise Qualitativa:', 20, yPos + 20);
            
            pdf.setFontSize(10);
            pdf.setTextColor(255, 255, 255);
            
            let analise = [];
            if (parseFloat(csat) >= 80) analise.push('Excelente desempenho em CSAT');
            else if (parseFloat(csat) >= 60) analise.push('Bom desempenho em CSAT');
            else if (parseFloat(csat) >= 40) analise.push('Desempenho regular em CSAT');
            else analise.push('Desempenho abaixo do esperado em CSAT');
            
            if (parseFloat(nps) >= 50) analise.push('Excelente NPS');
            else if (parseFloat(nps) >= 0) analise.push('NPS positivo');
            else if (parseFloat(nps) >= -20) analise.push('NPS neutro');
            else analise.push('NPS negativo - atenção necessária');
            
            yPos += 40;
            analise.forEach(item => {
                pdf.text(`• ${item}`, 20, yPos);
                yPos += 15;
            });
            
            // Metas individuais
            const metasAnalista = metas.individuais[analista.id] || {};
            if (metasAnalista.csat || metasAnalista.nps) {
                yPos += 10;
                pdf.setFontSize(14);
                pdf.setTextColor(230, 81, 0);
                pdf.text('Metas Individuais:', 20, yPos);
                yPos += 15;
                
                pdf.setFontSize(10);
                pdf.setTextColor(255, 255, 255);
                
                if (metasAnalista.csat) {
                    const progressoCSAT = Math.min((parseFloat(csat) / metasAnalista.csat.valor) * 100, 100);
                    pdf.text(`• Meta CSAT: ${metasAnalista.csat.valor}% (${metasAnalista.csat.periodo})`, 20, yPos);
                    yPos += 10;
                    pdf.text(`  Progresso: ${progressoCSAT.toFixed(1)}%`, 20, yPos);
                    yPos += 10;
                    
                    if (parseFloat(csat) >= metasAnalista.csat.valor) {
                        pdf.setTextColor(0, 230, 118);
                        pdf.text('  ✓ Meta atingida!', 20, yPos);
                        yPos += 15;
                        pdf.setTextColor(255, 255, 255);
                    }
                }
                
                if (metasAnalista.nps) {
                    const progressoNPS = Math.min((parseFloat(nps) / metasAnalista.nps.valor) * 100, 100);
                    pdf.text(`• Meta NPS: ${metasAnalista.nps.valor} (${metasAnalista.nps.periodo})`, 20, yPos);
                    yPos += 10;
                    pdf.text(`  Progresso: ${progressoNPS.toFixed(1)}%`, 20, yPos);
                    yPos += 10;
                    
                    if (parseFloat(nps) >= metasAnalista.nps.valor) {
                        pdf.setTextColor(0, 230, 118);
                        pdf.text('  ✓ Meta atingida!', 20, yPos);
                        yPos += 15;
                        pdf.setTextColor(255, 255, 255);
                    }
                }
            }
        }

        async function adicionarListaClientesEbook(pdf, analista) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            
            // Título
            pdf.setFontSize(18);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Lista de Clientes', 20, 30);
            
            if (!analista.clientes || analista.clientes.length === 0) {
                pdf.setFontSize(12);
                pdf.setTextColor(255, 255, 255);
                pdf.text('Nenhum cliente cadastrado', 20, 50);
                return;
            }
            
            // Agrupar clientes por nota
            const clientesPorNota = {};
            analista.clientes.forEach(cliente => {
                const chave = `${cliente.tipo}_${cliente.nota}`;
                if (!clientesPorNota[chave]) {
                    clientesPorNota[chave] = [];
                }
                clientesPorNota[chave].push(cliente);
            });
            
            let yPos = 50;
            
            // CSAT Clients
            pdf.setFontSize(14);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Clientes CSAT:', 20, yPos);
            yPos += 20;
            
            pdf.setFontSize(10);
            pdf.setTextColor(255, 255, 255);
            
            for (let nota = 1; nota <= 10; nota++) {
                const chave = `csat_${nota}`;
                if (clientesPorNota[chave]) {
                    pdf.text(`Nota ${nota}:`, 25, yPos);
                    yPos += 15;
                    
                    clientesPorNota[chave].forEach(cliente => {
                        pdf.text(`• ${cliente.dominio} (${cliente.data})`, 35, yPos);
                        yPos += 12;
                        
                        // Verificar se precisa de nova página
                        if (yPos > 270) {
                            pdf.addPage();
                            yPos = 30;
                        }
                    });
                    yPos += 10;
                }
            }
            
            // NPS Clients
            if (yPos > 250) {
                pdf.addPage();
                yPos = 30;
            }
            
            pdf.setFontSize(14);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Clientes NPS:', 20, yPos);
            yPos += 20;
            
            pdf.setFontSize(10);
            pdf.setTextColor(255, 255, 255);
            
            for (let nota = 0; nota <= 10; nota++) {
                const chave = `nps_${nota}`;
                if (clientesPorNota[chave]) {
                    const categoria = nota <= 6 ? 'Detrator' : nota <= 8 ? 'Neutro' : 'Promotor';
                    pdf.text(`Nota ${nota} (${categoria}):`, 25, yPos);
                    yPos += 15;
                    
                    clientesPorNota[chave].forEach(cliente => {
                        pdf.text(`• ${cliente.dominio} (${cliente.data})`, 35, yPos);
                        yPos += 12;
                        
                        // Verificar se precisa de nova página
                        if (yPos > 270) {
                            pdf.addPage();
                            yPos = 30;
                        }
                    });
                    yPos += 10;
                }
            }
            
            // Resumo final
            if (yPos > 250) {
                pdf.addPage();
                yPos = 30;
            }
            
            pdf.setFontSize(12);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Resumo da Lista:', 20, yPos);
            yPos += 20;
            
            pdf.setFontSize(10);
            pdf.setTextColor(255, 255, 255);
            const clientesUnicos = new Set(analista.clientes.map(c => c.dominio)).size;
            pdf.text(`Total de clientes únicos: ${clientesUnicos}`, 20, yPos);
            yPos += 15;
            pdf.text(`Total de avaliações registradas: ${analista.clientes.length}`, 20, yPos);
        }

        async function adicionarTabelaConsolidadaEbook(pdf) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            
            // Título
            pdf.setFontSize(18);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Tabela Consolidada de Desempenho', 20, 30);
            
            // Obter dados da tabela
            const filtroArea = document.getElementById('filtroArea').value;
            let analistasFiltrados = filtroArea === 'todos' 
                ? analistas 
                : analistas.filter(a => a.area === filtroArea);
            
            if (ordenacaoAtual.campo) {
                analistasFiltrados = aplicarOrdenacao(analistasFiltrados);
            }
            
            // Preparar dados para a tabela
            const tableData = [];
            analistasFiltrados.forEach(analista => {
                const csat = calcularCSAT(analista);
                const nps = calcularNPS(analista);
                const totalAvaliacoes = calcularTotalAvaliacoes(analista);
                const metaCSAT = metas.individuais[analista.id] && metas.individuais[analista.id].csat;
                const metaNPS = metas.individuais[analista.id] && metas.individuais[analista.id].nps;
                
                tableData.push([
                    analista.nome,
                    analista.area === 'onboarding' ? 'Onboarding' : 'Renovação',
                    `${csat}%`,
                    metaCSAT ? metaCSAT.valor + '%' : '-',
                    nps,
                    metaNPS ? metaNPS.valor : '-',
                    totalAvaliacoes.toString()
                ]);
            });
            
            // Adicionar tabela usando o plugin autoTable
            pdf.autoTable({
                head: [['Analista', 'Área', 'CSAT', 'Meta CSAT', 'NPS', 'Meta NPS', 'Total Avaliações']],
                body: tableData,
                startY: 50,
                styles: {
                    fillColor: [26, 35, 126],
                    textColor: [224, 247, 255],
                    fontSize: 10
                },
                headStyles: {
                    fillColor: [230, 81, 0],
                    textColor: [26, 35, 126],
                    fontSize: 11,
                    fontStyle: 'bold'
                },
                alternateRowStyles: {
                    fillColor: [26, 35, 126]
                }
            });
            
            // Resumo final
            const finalY = pdf.lastAutoTable.finalY + 20;
            pdf.setFontSize(12);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Resumo Final:', 20, finalY);
            
            pdf.setFontSize(10);
            pdf.setTextColor(255, 255, 255);
            
            const totalAvaliacoes = analistasFiltrados.reduce((sum, a) => sum + calcularTotalAvaliacoes(a), 0);
            const mediaCSAT = analistasFiltrados.length > 0 ? 
                (analistasFiltrados.reduce((sum, a) => sum + parseFloat(calcularCSAT(a)), 0) / analistasFiltrados.length).toFixed(1) : "0.0";
            const mediaNPS = analistasFiltrados.length > 0 ? 
                (analistasFiltrados.reduce((sum, a) => sum + parseFloat(calcularNPS(a)), 0) / analistasFiltrados.length).toFixed(1) : "0.0";
            
            pdf.text(`• Total de analistas analisados: ${analistasFiltrados.length}`, 20, finalY + 15);
            pdf.text(`• Total de avaliações processadas: ${totalAvaliacoes}`, 20, finalY + 30);
            pdf.text(`• CSAT médio da área: ${mediaCSAT}%`, 20, finalY + 45);
            pdf.text(`• NPS médio da área: ${mediaNPS}`, 20, finalY + 60);
            
            // Metas da área
            if (metas.area.csat || metas.area.nps) {
                pdf.setFontSize(12);
                pdf.setTextColor(230, 81, 0);
                pdf.text('Metas da Área:', 20, finalY + 75);
                
                pdf.setFontSize(10);
                pdf.setTextColor(255, 255, 255);
                
                if (metas.area.csat) {
                    const progressoCSAT = Math.min((parseFloat(mediaCSAT) / metas.area.csat.valor) * 100, 100);
                    pdf.text(`• Meta CSAT: ${metas.area.csat.valor}% (${metas.area.csat.periodo})`, 20, finalY + 90);
                    pdf.text(`  Progresso: ${progressoCSAT.toFixed(1)}%`, 20, finalY + 100);
                    
                    if (parseFloat(mediaCSAT) >= metas.area.csat.valor) {
                        pdf.setTextColor(0, 230, 118);
                        pdf.text('  ✓ Meta atingida!', 20, finalY + 110);
                        pdf.setTextColor(255, 255, 255);
                    }
                }
                
                if (metas.area.nps) {
                    const progressoNPS = Math.min((parseFloat(mediaNPS) / metas.area.nps.valor) * 100, 100);
                    pdf.text(`• Meta NPS: ${metas.area.nps.valor} (${metas.area.nps.periodo})`, 20, finalY + 120);
                    pdf.text(`  Progresso: ${progressoNPS.toFixed(1)}%`, 20, finalY + 130);
                    
                    if (parseFloat(mediaNPS) >= metas.area.nps.valor) {
                        pdf.setTextColor(0, 230, 118);
                        pdf.text('  ✓ Meta atingida!', 20, finalY + 140);
                    }
                }
            }
        }

        async function adicionarTabelaResumidaEbook(pdf) {
            const pageWidth = pdf.internal.pageSize.getWidth();
            
            // Título
            pdf.setFontSize(18);
            pdf.setTextColor(230, 81, 0);
            pdf.text('Tabela Resumida', 20, 30);
            
            // Obter dados da tabela
            const filtroArea = document.getElementById('filtroArea').value;
            let analistasFiltrados = filtroArea === 'todos' 
                ? analistas 
                : analistas.filter(a => a.area === filtroArea);
            
            if (ordenacaoAtual.campo) {
                analistasFiltrados = aplicarOrdenacao(analistasFiltrados);
            }
            
            // Preparar dados para a tabela
            const tableData = [];
            analistasFiltrados.forEach(analista => {
                const csat = calcularCSAT(analista);
                const nps = calcularNPS(analista);
                const totalAvaliacoes = calcularTotalAvaliacoes(analista);
                const metaCSAT = metas.individuais[analista.id] && metas.individuais[analista.id].csat;
                const metaNPS = metas.individuais[analista.id] && metas.individuais[analista.id].nps;
                
                tableData.push([
                    analista.nome,
                    analista.area === 'onboarding' ? 'Onboarding' : 'Renovação',
                    `${csat}%`,
                    metaCSAT ? metaCSAT.valor + '%' : '-',
                    nps,
                    metaNPS ? metaNPS.valor : '-',
                    totalAvaliacoes.toString()
                ]);
            });
            
            // Adicionar tabela usando o plugin autoTable
            pdf.autoTable({
                head: [['Analista', 'Área', 'CSAT', 'Meta CSAT', 'NPS', 'Meta NPS', 'Total Avaliações']],
                body: tableData,
                startY: 50,
                styles: {
                    fillColor: [26, 35, 126],
                    textColor: [224, 247, 255],
                    fontSize: 10
                },
                headStyles: {
                    fillColor: [230, 81, 0],
                    textColor: [26, 35, 126],
                    fontSize: 11,
                    fontStyle: 'bold'
                },
                alternateRowStyles: {
                    fillColor: [26, 35, 126]
                }
            });
        }

        // Funções Utilitárias
        function salvarDados() {
            localStorage.setItem('analistas', JSON.stringify(analistas));
        }

        function mostrarStatus(mensagem, tipo) {
            // Criar elemento de status se não existir
            let statusDiv = document.getElementById('statusMessage');
            if (!statusDiv) {
                statusDiv = document.createElement('div');
                statusDiv.id = 'statusMessage';
                statusDiv.style.position = 'fixed';
                statusDiv.style.top = '20px';
                statusDiv.style.right = '20px';
                statusDiv.style.zIndex = '1000';
                statusDiv.style.maxWidth = '300px';
                document.body.appendChild(statusDiv);
            }
            
            statusDiv.innerHTML = `<div class="status-message status-${tipo}">${mensagem}</div>`;
            
            if (tipo === 'success') {
                setTimeout(() => {
                    statusDiv.innerHTML = '';
                }, 5000);
            }
        }

        function updateCurrentDate() {
            const now = new Date();
            document.getElementById('current-date').textContent = 
                now.toLocaleDateString('pt-BR') + ' ' + now.toLocaleTimeString('pt-BR');
        }

        // Funções de loading
        function showLoading() {
            document.getElementById('loadingOverlay').style.display = 'flex';
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').style.display = 'none';
        }

        // Inicializar partículas
        function createParticles() {
            const container = document.querySelector('.cyber-grid');
            for (let i = 0; i < 20; i++) {
                const particle = document.createElement('div');
                particle.style.cssText = `
                    position: fixed; width: 2px; height: 2px; background: var(--accent);
                    border-radius: 50%; box-shadow: 0 0 5px var(--accent);
                    left: ${Math.random() * 100}vw; top: ${Math.random() * 100}vh;
                    animation: float ${5 + Math.random() * 10}s infinite linear;
                `;
                container.appendChild(particle);
            }
        }

        // Adicionar CSS para animação
        const style = document.createElement('style');
        style.textContent = `
            @keyframes float {
                0% { transform: translate(0, 0); opacity: 0; }
                10% { opacity: 1; }
                90% { opacity: 1; }
                100% { transform: translate(${Math.random() * 100 - 50}px, ${Math.random() * 100 - 50}px); opacity: 0; }
            }
        `;
        document.head.appendChild(style);

        createParticles();
        setInterval(updateCurrentDate, 1000);

        // Fechar modal ao clicar fora
        window.onclick = function(event) {
            const modal = document.getElementById('exportModal');
            const metaModal = document.getElementById('metaModal');
            const fechamentoModal = document.getElementById('fechamentoModal');
            
            if (event.target === modal) {
                fecharModalExportacao();
            }
            
            if (event.target === metaModal) {
                fecharModalMeta();
            }
            
            if (event.target === fechamentoModal) {
                fecharModalFechamento();
            }
        }
    </script>
</body>
</html>